#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.237
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TreasureLand.DBM
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TreasureLand")]
	public partial class TreasureLandDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBillingCategory(BillingCategory instance);
    partial void UpdateBillingCategory(BillingCategory instance);
    partial void DeleteBillingCategory(BillingCategory instance);
    partial void InsertRoomStatus(RoomStatus instance);
    partial void UpdateRoomStatus(RoomStatus instance);
    partial void DeleteRoomStatus(RoomStatus instance);
    partial void InsertDiscount(Discount instance);
    partial void UpdateDiscount(Discount instance);
    partial void DeleteDiscount(Discount instance);
    partial void InsertGuest(Guest instance);
    partial void UpdateGuest(Guest instance);
    partial void DeleteGuest(Guest instance);
    partial void InsertHotel(Hotel instance);
    partial void UpdateHotel(Hotel instance);
    partial void DeleteHotel(Hotel instance);
    partial void InsertHotelRoomType(HotelRoomType instance);
    partial void UpdateHotelRoomType(HotelRoomType instance);
    partial void DeleteHotelRoomType(HotelRoomType instance);
    partial void InsertReservation(Reservation instance);
    partial void UpdateReservation(Reservation instance);
    partial void DeleteReservation(Reservation instance);
    partial void InsertReservationDetail(ReservationDetail instance);
    partial void UpdateReservationDetail(ReservationDetail instance);
    partial void DeleteReservationDetail(ReservationDetail instance);
    partial void InsertReservationDetailBilling(ReservationDetailBilling instance);
    partial void UpdateReservationDetailBilling(ReservationDetailBilling instance);
    partial void DeleteReservationDetailBilling(ReservationDetailBilling instance);
    partial void InsertRevenue(Revenue instance);
    partial void UpdateRevenue(Revenue instance);
    partial void DeleteRevenue(Revenue instance);
    partial void InsertRevenueCategory(RevenueCategory instance);
    partial void UpdateRevenueCategory(RevenueCategory instance);
    partial void DeleteRevenueCategory(RevenueCategory instance);
    partial void InsertRoom(Room instance);
    partial void UpdateRoom(Room instance);
    partial void DeleteRoom(Room instance);
    #endregion
		
		public TreasureLandDataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["TreasureLandDB"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TreasureLandDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TreasureLandDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TreasureLandDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TreasureLandDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BillingCategory> BillingCategories
		{
			get
			{
				return this.GetTable<BillingCategory>();
			}
		}
		
		public System.Data.Linq.Table<RoomStatus> RoomStatus
		{
			get
			{
				return this.GetTable<RoomStatus>();
			}
		}
		
		public System.Data.Linq.Table<Discount> Discounts
		{
			get
			{
				return this.GetTable<Discount>();
			}
		}
		
		public System.Data.Linq.Table<Guest> Guests
		{
			get
			{
				return this.GetTable<Guest>();
			}
		}
		
		public System.Data.Linq.Table<Hotel> Hotels
		{
			get
			{
				return this.GetTable<Hotel>();
			}
		}
		
		public System.Data.Linq.Table<HotelRoomType> HotelRoomTypes
		{
			get
			{
				return this.GetTable<HotelRoomType>();
			}
		}
		
		public System.Data.Linq.Table<Reservation> Reservations
		{
			get
			{
				return this.GetTable<Reservation>();
			}
		}
		
		public System.Data.Linq.Table<ReservationDetail> ReservationDetails
		{
			get
			{
				return this.GetTable<ReservationDetail>();
			}
		}
		
		public System.Data.Linq.Table<ReservationDetailBilling> ReservationDetailBillings
		{
			get
			{
				return this.GetTable<ReservationDetailBilling>();
			}
		}
		
		public System.Data.Linq.Table<Revenue> Revenues
		{
			get
			{
				return this.GetTable<Revenue>();
			}
		}
		
		public System.Data.Linq.Table<RevenueCategory> RevenueCategories
		{
			get
			{
				return this.GetTable<RevenueCategory>();
			}
		}
		
		public System.Data.Linq.Table<Room> Rooms
		{
			get
			{
				return this.GetTable<Room>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BillingCategory")]
	public partial class BillingCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _BillingCategoryID;
		
		private string _BillingCategoryDescription;
		
		private System.Nullable<bool> _BillingCategoryTaxable;
		
		private EntitySet<ReservationDetailBilling> _ReservationDetailBillings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBillingCategoryIDChanging(short value);
    partial void OnBillingCategoryIDChanged();
    partial void OnBillingCategoryDescriptionChanging(string value);
    partial void OnBillingCategoryDescriptionChanged();
    partial void OnBillingCategoryTaxableChanging(System.Nullable<bool> value);
    partial void OnBillingCategoryTaxableChanged();
    #endregion
		
		public BillingCategory()
		{
			this._ReservationDetailBillings = new EntitySet<ReservationDetailBilling>(new Action<ReservationDetailBilling>(this.attach_ReservationDetailBillings), new Action<ReservationDetailBilling>(this.detach_ReservationDetailBillings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingCategoryID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short BillingCategoryID
		{
			get
			{
				return this._BillingCategoryID;
			}
			set
			{
				if ((this._BillingCategoryID != value))
				{
					this.OnBillingCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._BillingCategoryID = value;
					this.SendPropertyChanged("BillingCategoryID");
					this.OnBillingCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingCategoryDescription", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string BillingCategoryDescription
		{
			get
			{
				return this._BillingCategoryDescription;
			}
			set
			{
				if ((this._BillingCategoryDescription != value))
				{
					this.OnBillingCategoryDescriptionChanging(value);
					this.SendPropertyChanging();
					this._BillingCategoryDescription = value;
					this.SendPropertyChanged("BillingCategoryDescription");
					this.OnBillingCategoryDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingCategoryTaxable", DbType="Bit")]
		public System.Nullable<bool> BillingCategoryTaxable
		{
			get
			{
				return this._BillingCategoryTaxable;
			}
			set
			{
				if ((this._BillingCategoryTaxable != value))
				{
					this.OnBillingCategoryTaxableChanging(value);
					this.SendPropertyChanging();
					this._BillingCategoryTaxable = value;
					this.SendPropertyChanged("BillingCategoryTaxable");
					this.OnBillingCategoryTaxableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BillingCategory_ReservationDetailBilling", Storage="_ReservationDetailBillings", ThisKey="BillingCategoryID", OtherKey="BillingCategoryID")]
		public EntitySet<ReservationDetailBilling> ReservationDetailBillings
		{
			get
			{
				return this._ReservationDetailBillings;
			}
			set
			{
				this._ReservationDetailBillings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReservationDetailBillings(ReservationDetailBilling entity)
		{
			this.SendPropertyChanging();
			entity.BillingCategory = this;
		}
		
		private void detach_ReservationDetailBillings(ReservationDetailBilling entity)
		{
			this.SendPropertyChanging();
			entity.BillingCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoomStatus")]
	public partial class RoomStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private char _Status;
		
		private string _Description;
		
		private EntitySet<Room> _Rooms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStatusChanging(char value);
    partial void OnStatusChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public RoomStatus()
		{
			this._Rooms = new EntitySet<Room>(new Action<Room>(this.attach_Rooms), new Action<Room>(this.detach_Rooms));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Char(1) NOT NULL", IsPrimaryKey=true)]
		public char Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoomStatus_Room", Storage="_Rooms", ThisKey="Status", OtherKey="RoomStatus")]
		public EntitySet<Room> Rooms
		{
			get
			{
				return this._Rooms;
			}
			set
			{
				this._Rooms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.RoomStatus1 = this;
		}
		
		private void detach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.RoomStatus1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Discount")]
	public partial class Discount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _DiscountID;
		
		private string _DiscountDescription;
		
		private System.DateTime _DiscountExpiration;
		
		private string _DiscountRules;
		
		private decimal _DiscountAmount;
		
		private bool _IsPrecentage;
		
		private EntitySet<ReservationDetail> _ReservationDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDiscountIDChanging(short value);
    partial void OnDiscountIDChanged();
    partial void OnDiscountDescriptionChanging(string value);
    partial void OnDiscountDescriptionChanged();
    partial void OnDiscountExpirationChanging(System.DateTime value);
    partial void OnDiscountExpirationChanged();
    partial void OnDiscountRulesChanging(string value);
    partial void OnDiscountRulesChanged();
    partial void OnDiscountAmountChanging(decimal value);
    partial void OnDiscountAmountChanged();
    partial void OnIsPrecentageChanging(bool value);
    partial void OnIsPrecentageChanged();
    #endregion
		
		public Discount()
		{
			this._ReservationDetails = new EntitySet<ReservationDetail>(new Action<ReservationDetail>(this.attach_ReservationDetails), new Action<ReservationDetail>(this.detach_ReservationDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short DiscountID
		{
			get
			{
				return this._DiscountID;
			}
			set
			{
				if ((this._DiscountID != value))
				{
					this.OnDiscountIDChanging(value);
					this.SendPropertyChanging();
					this._DiscountID = value;
					this.SendPropertyChanged("DiscountID");
					this.OnDiscountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountDescription", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DiscountDescription
		{
			get
			{
				return this._DiscountDescription;
			}
			set
			{
				if ((this._DiscountDescription != value))
				{
					this.OnDiscountDescriptionChanging(value);
					this.SendPropertyChanging();
					this._DiscountDescription = value;
					this.SendPropertyChanged("DiscountDescription");
					this.OnDiscountDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountExpiration", DbType="SmallDateTime NOT NULL")]
		public System.DateTime DiscountExpiration
		{
			get
			{
				return this._DiscountExpiration;
			}
			set
			{
				if ((this._DiscountExpiration != value))
				{
					this.OnDiscountExpirationChanging(value);
					this.SendPropertyChanging();
					this._DiscountExpiration = value;
					this.SendPropertyChanged("DiscountExpiration");
					this.OnDiscountExpirationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountRules", DbType="VarChar(100)")]
		public string DiscountRules
		{
			get
			{
				return this._DiscountRules;
			}
			set
			{
				if ((this._DiscountRules != value))
				{
					this.OnDiscountRulesChanging(value);
					this.SendPropertyChanging();
					this._DiscountRules = value;
					this.SendPropertyChanged("DiscountRules");
					this.OnDiscountRulesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountAmount", DbType="Decimal(10,2) NOT NULL")]
		public decimal DiscountAmount
		{
			get
			{
				return this._DiscountAmount;
			}
			set
			{
				if ((this._DiscountAmount != value))
				{
					this.OnDiscountAmountChanging(value);
					this.SendPropertyChanging();
					this._DiscountAmount = value;
					this.SendPropertyChanged("DiscountAmount");
					this.OnDiscountAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPrecentage", DbType="Bit NOT NULL")]
		public bool IsPrecentage
		{
			get
			{
				return this._IsPrecentage;
			}
			set
			{
				if ((this._IsPrecentage != value))
				{
					this.OnIsPrecentageChanging(value);
					this.SendPropertyChanging();
					this._IsPrecentage = value;
					this.SendPropertyChanged("IsPrecentage");
					this.OnIsPrecentageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Discount_ReservationDetail", Storage="_ReservationDetails", ThisKey="DiscountID", OtherKey="DiscountID")]
		public EntitySet<ReservationDetail> ReservationDetails
		{
			get
			{
				return this._ReservationDetails;
			}
			set
			{
				this._ReservationDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReservationDetails(ReservationDetail entity)
		{
			this.SendPropertyChanging();
			entity.Discount = this;
		}
		
		private void detach_ReservationDetails(ReservationDetail entity)
		{
			this.SendPropertyChanging();
			entity.Discount = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Guest")]
	public partial class Guest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _GuestID;
		
		private string _GuestSalutation;
		
		private string _GuestFirstName;
		
		private string _GuestSurName;
		
		private string _GuestCompany;
		
		private string _GuestAddress;
		
		private string _GuestCity;
		
		private string _GuestRegion;
		
		private string _GuestPostalCode;
		
		private string _GuestCountry;
		
		private string _GuestFax;
		
		private string _GuestPhone;
		
		private string _GuestEmail;
		
		private string _GuestComments;
		
		private string _GuestIDNumber;
		
		private string _GuestIDIssueCountry;
		
		private string _GuestIDComment;
		
		private EntitySet<Reservation> _Reservations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGuestIDChanging(short value);
    partial void OnGuestIDChanged();
    partial void OnGuestSalutationChanging(string value);
    partial void OnGuestSalutationChanged();
    partial void OnGuestFirstNameChanging(string value);
    partial void OnGuestFirstNameChanged();
    partial void OnGuestSurNameChanging(string value);
    partial void OnGuestSurNameChanged();
    partial void OnGuestCompanyChanging(string value);
    partial void OnGuestCompanyChanged();
    partial void OnGuestAddressChanging(string value);
    partial void OnGuestAddressChanged();
    partial void OnGuestCityChanging(string value);
    partial void OnGuestCityChanged();
    partial void OnGuestRegionChanging(string value);
    partial void OnGuestRegionChanged();
    partial void OnGuestPostalCodeChanging(string value);
    partial void OnGuestPostalCodeChanged();
    partial void OnGuestCountryChanging(string value);
    partial void OnGuestCountryChanged();
    partial void OnGuestFaxChanging(string value);
    partial void OnGuestFaxChanged();
    partial void OnGuestPhoneChanging(string value);
    partial void OnGuestPhoneChanged();
    partial void OnGuestEmailChanging(string value);
    partial void OnGuestEmailChanged();
    partial void OnGuestCommentsChanging(string value);
    partial void OnGuestCommentsChanged();
    partial void OnGuestIDNumberChanging(string value);
    partial void OnGuestIDNumberChanged();
    partial void OnGuestIDIssueCountryChanging(string value);
    partial void OnGuestIDIssueCountryChanged();
    partial void OnGuestIDCommentChanging(string value);
    partial void OnGuestIDCommentChanged();
    #endregion
		
		public Guest()
		{
			this._Reservations = new EntitySet<Reservation>(new Action<Reservation>(this.attach_Reservations), new Action<Reservation>(this.detach_Reservations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GuestID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short GuestID
		{
			get
			{
				return this._GuestID;
			}
			set
			{
				if ((this._GuestID != value))
				{
					this.OnGuestIDChanging(value);
					this.SendPropertyChanging();
					this._GuestID = value;
					this.SendPropertyChanged("GuestID");
					this.OnGuestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GuestSalutation", DbType="VarChar(5)")]
		public string GuestSalutation
		{
			get
			{
				return this._GuestSalutation;
			}
			set
			{
				if ((this._GuestSalutation != value))
				{
					this.OnGuestSalutationChanging(value);
					this.SendPropertyChanging();
					this._GuestSalutation = value;
					this.SendPropertyChanged("GuestSalutation");
					this.OnGuestSalutationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GuestFirstName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string GuestFirstName
		{
			get
			{
				return this._GuestFirstName;
			}
			set
			{
				if ((this._GuestFirstName != value))
				{
					this.OnGuestFirstNameChanging(value);
					this.SendPropertyChanging();
					this._GuestFirstName = value;
					this.SendPropertyChanged("GuestFirstName");
					this.OnGuestFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GuestSurName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string GuestSurName
		{
			get
			{
				return this._GuestSurName;
			}
			set
			{
				if ((this._GuestSurName != value))
				{
					this.OnGuestSurNameChanging(value);
					this.SendPropertyChanging();
					this._GuestSurName = value;
					this.SendPropertyChanged("GuestSurName");
					this.OnGuestSurNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GuestCompany", DbType="VarChar(50)")]
		public string GuestCompany
		{
			get
			{
				return this._GuestCompany;
			}
			set
			{
				if ((this._GuestCompany != value))
				{
					this.OnGuestCompanyChanging(value);
					this.SendPropertyChanging();
					this._GuestCompany = value;
					this.SendPropertyChanged("GuestCompany");
					this.OnGuestCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GuestAddress", DbType="VarChar(50)")]
		public string GuestAddress
		{
			get
			{
				return this._GuestAddress;
			}
			set
			{
				if ((this._GuestAddress != value))
				{
					this.OnGuestAddressChanging(value);
					this.SendPropertyChanging();
					this._GuestAddress = value;
					this.SendPropertyChanged("GuestAddress");
					this.OnGuestAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GuestCity", DbType="VarChar(50)")]
		public string GuestCity
		{
			get
			{
				return this._GuestCity;
			}
			set
			{
				if ((this._GuestCity != value))
				{
					this.OnGuestCityChanging(value);
					this.SendPropertyChanging();
					this._GuestCity = value;
					this.SendPropertyChanged("GuestCity");
					this.OnGuestCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GuestRegion", DbType="VarChar(50)")]
		public string GuestRegion
		{
			get
			{
				return this._GuestRegion;
			}
			set
			{
				if ((this._GuestRegion != value))
				{
					this.OnGuestRegionChanging(value);
					this.SendPropertyChanging();
					this._GuestRegion = value;
					this.SendPropertyChanged("GuestRegion");
					this.OnGuestRegionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GuestPostalCode", DbType="VarChar(50)")]
		public string GuestPostalCode
		{
			get
			{
				return this._GuestPostalCode;
			}
			set
			{
				if ((this._GuestPostalCode != value))
				{
					this.OnGuestPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._GuestPostalCode = value;
					this.SendPropertyChanged("GuestPostalCode");
					this.OnGuestPostalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GuestCountry", DbType="VarChar(20)")]
		public string GuestCountry
		{
			get
			{
				return this._GuestCountry;
			}
			set
			{
				if ((this._GuestCountry != value))
				{
					this.OnGuestCountryChanging(value);
					this.SendPropertyChanging();
					this._GuestCountry = value;
					this.SendPropertyChanged("GuestCountry");
					this.OnGuestCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GuestFax", DbType="VarChar(20)")]
		public string GuestFax
		{
			get
			{
				return this._GuestFax;
			}
			set
			{
				if ((this._GuestFax != value))
				{
					this.OnGuestFaxChanging(value);
					this.SendPropertyChanging();
					this._GuestFax = value;
					this.SendPropertyChanged("GuestFax");
					this.OnGuestFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GuestPhone", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string GuestPhone
		{
			get
			{
				return this._GuestPhone;
			}
			set
			{
				if ((this._GuestPhone != value))
				{
					this.OnGuestPhoneChanging(value);
					this.SendPropertyChanging();
					this._GuestPhone = value;
					this.SendPropertyChanged("GuestPhone");
					this.OnGuestPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GuestEmail", DbType="VarChar(30)")]
		public string GuestEmail
		{
			get
			{
				return this._GuestEmail;
			}
			set
			{
				if ((this._GuestEmail != value))
				{
					this.OnGuestEmailChanging(value);
					this.SendPropertyChanging();
					this._GuestEmail = value;
					this.SendPropertyChanged("GuestEmail");
					this.OnGuestEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GuestComments", DbType="VarChar(200)")]
		public string GuestComments
		{
			get
			{
				return this._GuestComments;
			}
			set
			{
				if ((this._GuestComments != value))
				{
					this.OnGuestCommentsChanging(value);
					this.SendPropertyChanging();
					this._GuestComments = value;
					this.SendPropertyChanged("GuestComments");
					this.OnGuestCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GuestIDNumber", DbType="VarChar(50)")]
		public string GuestIDNumber
		{
			get
			{
				return this._GuestIDNumber;
			}
			set
			{
				if ((this._GuestIDNumber != value))
				{
					this.OnGuestIDNumberChanging(value);
					this.SendPropertyChanging();
					this._GuestIDNumber = value;
					this.SendPropertyChanged("GuestIDNumber");
					this.OnGuestIDNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GuestIDIssueCountry", DbType="VarChar(50)")]
		public string GuestIDIssueCountry
		{
			get
			{
				return this._GuestIDIssueCountry;
			}
			set
			{
				if ((this._GuestIDIssueCountry != value))
				{
					this.OnGuestIDIssueCountryChanging(value);
					this.SendPropertyChanging();
					this._GuestIDIssueCountry = value;
					this.SendPropertyChanged("GuestIDIssueCountry");
					this.OnGuestIDIssueCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GuestIDComment", DbType="VarChar(50)")]
		public string GuestIDComment
		{
			get
			{
				return this._GuestIDComment;
			}
			set
			{
				if ((this._GuestIDComment != value))
				{
					this.OnGuestIDCommentChanging(value);
					this.SendPropertyChanging();
					this._GuestIDComment = value;
					this.SendPropertyChanged("GuestIDComment");
					this.OnGuestIDCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Guest_Reservation", Storage="_Reservations", ThisKey="GuestID", OtherKey="GuestID")]
		public EntitySet<Reservation> Reservations
		{
			get
			{
				return this._Reservations;
			}
			set
			{
				this._Reservations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Reservations(Reservation entity)
		{
			this.SendPropertyChanging();
			entity.Guest = this;
		}
		
		private void detach_Reservations(Reservation entity)
		{
			this.SendPropertyChanging();
			entity.Guest = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hotel")]
	public partial class Hotel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _HotelID;
		
		private string _HotelName;
		
		private string _HotelAddress;
		
		private string _HotelCity;
		
		private string _HotelState;
		
		private string _HotelCountry;
		
		private string _HotelRegion;
		
		private string _HotelPostalCode;
		
		private short _TaxLocationID;
		
		private EntitySet<HotelRoomType> _HotelRoomTypes;
		
		private EntitySet<Revenue> _Revenues;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHotelIDChanging(short value);
    partial void OnHotelIDChanged();
    partial void OnHotelNameChanging(string value);
    partial void OnHotelNameChanged();
    partial void OnHotelAddressChanging(string value);
    partial void OnHotelAddressChanged();
    partial void OnHotelCityChanging(string value);
    partial void OnHotelCityChanged();
    partial void OnHotelStateChanging(string value);
    partial void OnHotelStateChanged();
    partial void OnHotelCountryChanging(string value);
    partial void OnHotelCountryChanged();
    partial void OnHotelRegionChanging(string value);
    partial void OnHotelRegionChanged();
    partial void OnHotelPostalCodeChanging(string value);
    partial void OnHotelPostalCodeChanged();
    partial void OnTaxLocationIDChanging(short value);
    partial void OnTaxLocationIDChanged();
    #endregion
		
		public Hotel()
		{
			this._HotelRoomTypes = new EntitySet<HotelRoomType>(new Action<HotelRoomType>(this.attach_HotelRoomTypes), new Action<HotelRoomType>(this.detach_HotelRoomTypes));
			this._Revenues = new EntitySet<Revenue>(new Action<Revenue>(this.attach_Revenues), new Action<Revenue>(this.detach_Revenues));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short HotelID
		{
			get
			{
				return this._HotelID;
			}
			set
			{
				if ((this._HotelID != value))
				{
					this.OnHotelIDChanging(value);
					this.SendPropertyChanging();
					this._HotelID = value;
					this.SendPropertyChanged("HotelID");
					this.OnHotelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string HotelName
		{
			get
			{
				return this._HotelName;
			}
			set
			{
				if ((this._HotelName != value))
				{
					this.OnHotelNameChanging(value);
					this.SendPropertyChanging();
					this._HotelName = value;
					this.SendPropertyChanged("HotelName");
					this.OnHotelNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelAddress", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string HotelAddress
		{
			get
			{
				return this._HotelAddress;
			}
			set
			{
				if ((this._HotelAddress != value))
				{
					this.OnHotelAddressChanging(value);
					this.SendPropertyChanging();
					this._HotelAddress = value;
					this.SendPropertyChanged("HotelAddress");
					this.OnHotelAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelCity", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string HotelCity
		{
			get
			{
				return this._HotelCity;
			}
			set
			{
				if ((this._HotelCity != value))
				{
					this.OnHotelCityChanging(value);
					this.SendPropertyChanging();
					this._HotelCity = value;
					this.SendPropertyChanged("HotelCity");
					this.OnHotelCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelState", DbType="Char(2)")]
		public string HotelState
		{
			get
			{
				return this._HotelState;
			}
			set
			{
				if ((this._HotelState != value))
				{
					this.OnHotelStateChanging(value);
					this.SendPropertyChanging();
					this._HotelState = value;
					this.SendPropertyChanged("HotelState");
					this.OnHotelStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelCountry", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string HotelCountry
		{
			get
			{
				return this._HotelCountry;
			}
			set
			{
				if ((this._HotelCountry != value))
				{
					this.OnHotelCountryChanging(value);
					this.SendPropertyChanging();
					this._HotelCountry = value;
					this.SendPropertyChanged("HotelCountry");
					this.OnHotelCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelRegion", DbType="VarChar(50)")]
		public string HotelRegion
		{
			get
			{
				return this._HotelRegion;
			}
			set
			{
				if ((this._HotelRegion != value))
				{
					this.OnHotelRegionChanging(value);
					this.SendPropertyChanging();
					this._HotelRegion = value;
					this.SendPropertyChanged("HotelRegion");
					this.OnHotelRegionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelPostalCode", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string HotelPostalCode
		{
			get
			{
				return this._HotelPostalCode;
			}
			set
			{
				if ((this._HotelPostalCode != value))
				{
					this.OnHotelPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._HotelPostalCode = value;
					this.SendPropertyChanged("HotelPostalCode");
					this.OnHotelPostalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxLocationID", DbType="SmallInt NOT NULL")]
		public short TaxLocationID
		{
			get
			{
				return this._TaxLocationID;
			}
			set
			{
				if ((this._TaxLocationID != value))
				{
					this.OnTaxLocationIDChanging(value);
					this.SendPropertyChanging();
					this._TaxLocationID = value;
					this.SendPropertyChanged("TaxLocationID");
					this.OnTaxLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hotel_HotelRoomType", Storage="_HotelRoomTypes", ThisKey="HotelID", OtherKey="HotelID")]
		public EntitySet<HotelRoomType> HotelRoomTypes
		{
			get
			{
				return this._HotelRoomTypes;
			}
			set
			{
				this._HotelRoomTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hotel_Revenue", Storage="_Revenues", ThisKey="HotelID", OtherKey="HotelID")]
		public EntitySet<Revenue> Revenues
		{
			get
			{
				return this._Revenues;
			}
			set
			{
				this._Revenues.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HotelRoomTypes(HotelRoomType entity)
		{
			this.SendPropertyChanging();
			entity.Hotel = this;
		}
		
		private void detach_HotelRoomTypes(HotelRoomType entity)
		{
			this.SendPropertyChanging();
			entity.Hotel = null;
		}
		
		private void attach_Revenues(Revenue entity)
		{
			this.SendPropertyChanging();
			entity.Hotel = this;
		}
		
		private void detach_Revenues(Revenue entity)
		{
			this.SendPropertyChanging();
			entity.Hotel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HotelRoomType")]
	public partial class HotelRoomType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _HotelRoomTypeID;
		
		private short _HotelID;
		
		private string _RoomType;
		
		private decimal _RoomTypeRackRate;
		
		private string _RoomTypeDescription;
		
		private EntitySet<Room> _Rooms;
		
		private EntityRef<Hotel> _Hotel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHotelRoomTypeIDChanging(short value);
    partial void OnHotelRoomTypeIDChanged();
    partial void OnHotelIDChanging(short value);
    partial void OnHotelIDChanged();
    partial void OnRoomTypeChanging(string value);
    partial void OnRoomTypeChanged();
    partial void OnRoomTypeRackRateChanging(decimal value);
    partial void OnRoomTypeRackRateChanged();
    partial void OnRoomTypeDescriptionChanging(string value);
    partial void OnRoomTypeDescriptionChanged();
    #endregion
		
		public HotelRoomType()
		{
			this._Rooms = new EntitySet<Room>(new Action<Room>(this.attach_Rooms), new Action<Room>(this.detach_Rooms));
			this._Hotel = default(EntityRef<Hotel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelRoomTypeID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short HotelRoomTypeID
		{
			get
			{
				return this._HotelRoomTypeID;
			}
			set
			{
				if ((this._HotelRoomTypeID != value))
				{
					this.OnHotelRoomTypeIDChanging(value);
					this.SendPropertyChanging();
					this._HotelRoomTypeID = value;
					this.SendPropertyChanged("HotelRoomTypeID");
					this.OnHotelRoomTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelID", DbType="SmallInt NOT NULL")]
		public short HotelID
		{
			get
			{
				return this._HotelID;
			}
			set
			{
				if ((this._HotelID != value))
				{
					if (this._Hotel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHotelIDChanging(value);
					this.SendPropertyChanging();
					this._HotelID = value;
					this.SendPropertyChanged("HotelID");
					this.OnHotelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomType", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string RoomType
		{
			get
			{
				return this._RoomType;
			}
			set
			{
				if ((this._RoomType != value))
				{
					this.OnRoomTypeChanging(value);
					this.SendPropertyChanging();
					this._RoomType = value;
					this.SendPropertyChanged("RoomType");
					this.OnRoomTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomTypeRackRate", DbType="SmallMoney NOT NULL")]
		public decimal RoomTypeRackRate
		{
			get
			{
				return this._RoomTypeRackRate;
			}
			set
			{
				if ((this._RoomTypeRackRate != value))
				{
					this.OnRoomTypeRackRateChanging(value);
					this.SendPropertyChanging();
					this._RoomTypeRackRate = value;
					this.SendPropertyChanged("RoomTypeRackRate");
					this.OnRoomTypeRackRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomTypeDescription", DbType="VarChar(200)")]
		public string RoomTypeDescription
		{
			get
			{
				return this._RoomTypeDescription;
			}
			set
			{
				if ((this._RoomTypeDescription != value))
				{
					this.OnRoomTypeDescriptionChanging(value);
					this.SendPropertyChanging();
					this._RoomTypeDescription = value;
					this.SendPropertyChanged("RoomTypeDescription");
					this.OnRoomTypeDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HotelRoomType_Room", Storage="_Rooms", ThisKey="HotelRoomTypeID", OtherKey="HotelRoomTypeID")]
		public EntitySet<Room> Rooms
		{
			get
			{
				return this._Rooms;
			}
			set
			{
				this._Rooms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hotel_HotelRoomType", Storage="_Hotel", ThisKey="HotelID", OtherKey="HotelID", IsForeignKey=true)]
		public Hotel Hotel
		{
			get
			{
				return this._Hotel.Entity;
			}
			set
			{
				Hotel previousValue = this._Hotel.Entity;
				if (((previousValue != value) 
							|| (this._Hotel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hotel.Entity = null;
						previousValue.HotelRoomTypes.Remove(this);
					}
					this._Hotel.Entity = value;
					if ((value != null))
					{
						value.HotelRoomTypes.Add(this);
						this._HotelID = value.HotelID;
					}
					else
					{
						this._HotelID = default(short);
					}
					this.SendPropertyChanged("Hotel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.HotelRoomType = this;
		}
		
		private void detach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.HotelRoomType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reservation")]
	public partial class Reservation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ReservationID;
		
		private short _GuestID;
		
		private System.DateTime _ReservationDate;
		
		private char _ReservationStatus;
		
		private string _ReservationComments;
		
		private EntitySet<ReservationDetail> _ReservationDetails;
		
		private EntityRef<Guest> _Guest;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReservationIDChanging(short value);
    partial void OnReservationIDChanged();
    partial void OnGuestIDChanging(short value);
    partial void OnGuestIDChanged();
    partial void OnReservationDateChanging(System.DateTime value);
    partial void OnReservationDateChanged();
    partial void OnReservationStatusChanging(char value);
    partial void OnReservationStatusChanged();
    partial void OnReservationCommentsChanging(string value);
    partial void OnReservationCommentsChanged();
    #endregion
		
		public Reservation()
		{
			this._ReservationDetails = new EntitySet<ReservationDetail>(new Action<ReservationDetail>(this.attach_ReservationDetails), new Action<ReservationDetail>(this.detach_ReservationDetails));
			this._Guest = default(EntityRef<Guest>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ReservationID
		{
			get
			{
				return this._ReservationID;
			}
			set
			{
				if ((this._ReservationID != value))
				{
					this.OnReservationIDChanging(value);
					this.SendPropertyChanging();
					this._ReservationID = value;
					this.SendPropertyChanged("ReservationID");
					this.OnReservationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GuestID", DbType="SmallInt NOT NULL")]
		public short GuestID
		{
			get
			{
				return this._GuestID;
			}
			set
			{
				if ((this._GuestID != value))
				{
					if (this._Guest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGuestIDChanging(value);
					this.SendPropertyChanging();
					this._GuestID = value;
					this.SendPropertyChanged("GuestID");
					this.OnGuestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime ReservationDate
		{
			get
			{
				return this._ReservationDate;
			}
			set
			{
				if ((this._ReservationDate != value))
				{
					this.OnReservationDateChanging(value);
					this.SendPropertyChanging();
					this._ReservationDate = value;
					this.SendPropertyChanged("ReservationDate");
					this.OnReservationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationStatus", DbType="Char(1) NOT NULL")]
		public char ReservationStatus
		{
			get
			{
				return this._ReservationStatus;
			}
			set
			{
				if ((this._ReservationStatus != value))
				{
					this.OnReservationStatusChanging(value);
					this.SendPropertyChanging();
					this._ReservationStatus = value;
					this.SendPropertyChanged("ReservationStatus");
					this.OnReservationStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationComments", DbType="VarChar(200)")]
		public string ReservationComments
		{
			get
			{
				return this._ReservationComments;
			}
			set
			{
				if ((this._ReservationComments != value))
				{
					this.OnReservationCommentsChanging(value);
					this.SendPropertyChanging();
					this._ReservationComments = value;
					this.SendPropertyChanged("ReservationComments");
					this.OnReservationCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reservation_ReservationDetail", Storage="_ReservationDetails", ThisKey="ReservationID", OtherKey="ReservationID")]
		public EntitySet<ReservationDetail> ReservationDetails
		{
			get
			{
				return this._ReservationDetails;
			}
			set
			{
				this._ReservationDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Guest_Reservation", Storage="_Guest", ThisKey="GuestID", OtherKey="GuestID", IsForeignKey=true)]
		public Guest Guest
		{
			get
			{
				return this._Guest.Entity;
			}
			set
			{
				Guest previousValue = this._Guest.Entity;
				if (((previousValue != value) 
							|| (this._Guest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Guest.Entity = null;
						previousValue.Reservations.Remove(this);
					}
					this._Guest.Entity = value;
					if ((value != null))
					{
						value.Reservations.Add(this);
						this._GuestID = value.GuestID;
					}
					else
					{
						this._GuestID = default(short);
					}
					this.SendPropertyChanged("Guest");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReservationDetails(ReservationDetail entity)
		{
			this.SendPropertyChanging();
			entity.Reservation = this;
		}
		
		private void detach_ReservationDetails(ReservationDetail entity)
		{
			this.SendPropertyChanging();
			entity.Reservation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReservationDetail")]
	public partial class ReservationDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ReservationDetailID;
		
		private short _RoomID;
		
		private short _ReservationID;
		
		private decimal _QuotedRate;
		
		private System.DateTime _CheckinDate;
		
		private byte _Nights;
		
		private char _Status;
		
		private string _Comments;
		
		private System.Nullable<short> _DiscountID;
		
		private byte _NumberOfAdults;
		
		private byte _NumberOfChildren;
		
		private EntitySet<ReservationDetailBilling> _ReservationDetailBillings;
		
		private EntityRef<Discount> _Discount;
		
		private EntityRef<Reservation> _Reservation;
		
		private EntityRef<Room> _Room;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReservationDetailIDChanging(short value);
    partial void OnReservationDetailIDChanged();
    partial void OnRoomIDChanging(short value);
    partial void OnRoomIDChanged();
    partial void OnReservationIDChanging(short value);
    partial void OnReservationIDChanged();
    partial void OnQuotedRateChanging(decimal value);
    partial void OnQuotedRateChanged();
    partial void OnCheckinDateChanging(System.DateTime value);
    partial void OnCheckinDateChanged();
    partial void OnNightsChanging(byte value);
    partial void OnNightsChanged();
    partial void OnStatusChanging(char value);
    partial void OnStatusChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnDiscountIDChanging(System.Nullable<short> value);
    partial void OnDiscountIDChanged();
    partial void OnNumberOfAdultsChanging(byte value);
    partial void OnNumberOfAdultsChanged();
    partial void OnNumberOfChildrenChanging(byte value);
    partial void OnNumberOfChildrenChanged();
    #endregion
		
		public ReservationDetail()
		{
			this._ReservationDetailBillings = new EntitySet<ReservationDetailBilling>(new Action<ReservationDetailBilling>(this.attach_ReservationDetailBillings), new Action<ReservationDetailBilling>(this.detach_ReservationDetailBillings));
			this._Discount = default(EntityRef<Discount>);
			this._Reservation = default(EntityRef<Reservation>);
			this._Room = default(EntityRef<Room>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationDetailID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ReservationDetailID
		{
			get
			{
				return this._ReservationDetailID;
			}
			set
			{
				if ((this._ReservationDetailID != value))
				{
					this.OnReservationDetailIDChanging(value);
					this.SendPropertyChanging();
					this._ReservationDetailID = value;
					this.SendPropertyChanged("ReservationDetailID");
					this.OnReservationDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", DbType="SmallInt NOT NULL")]
		public short RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					if (this._Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationID", DbType="SmallInt NOT NULL")]
		public short ReservationID
		{
			get
			{
				return this._ReservationID;
			}
			set
			{
				if ((this._ReservationID != value))
				{
					if (this._Reservation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReservationIDChanging(value);
					this.SendPropertyChanging();
					this._ReservationID = value;
					this.SendPropertyChanged("ReservationID");
					this.OnReservationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuotedRate", DbType="SmallMoney NOT NULL")]
		public decimal QuotedRate
		{
			get
			{
				return this._QuotedRate;
			}
			set
			{
				if ((this._QuotedRate != value))
				{
					this.OnQuotedRateChanging(value);
					this.SendPropertyChanging();
					this._QuotedRate = value;
					this.SendPropertyChanged("QuotedRate");
					this.OnQuotedRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckinDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime CheckinDate
		{
			get
			{
				return this._CheckinDate;
			}
			set
			{
				if ((this._CheckinDate != value))
				{
					this.OnCheckinDateChanging(value);
					this.SendPropertyChanging();
					this._CheckinDate = value;
					this.SendPropertyChanged("CheckinDate");
					this.OnCheckinDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nights", DbType="TinyInt NOT NULL")]
		public byte Nights
		{
			get
			{
				return this._Nights;
			}
			set
			{
				if ((this._Nights != value))
				{
					this.OnNightsChanging(value);
					this.SendPropertyChanging();
					this._Nights = value;
					this.SendPropertyChanged("Nights");
					this.OnNightsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Char(1) NOT NULL")]
		public char Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="VarChar(MAX)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountID", DbType="SmallInt")]
		public System.Nullable<short> DiscountID
		{
			get
			{
				return this._DiscountID;
			}
			set
			{
				if ((this._DiscountID != value))
				{
					if (this._Discount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDiscountIDChanging(value);
					this.SendPropertyChanging();
					this._DiscountID = value;
					this.SendPropertyChanged("DiscountID");
					this.OnDiscountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfAdults", DbType="TinyInt NOT NULL")]
		public byte NumberOfAdults
		{
			get
			{
				return this._NumberOfAdults;
			}
			set
			{
				if ((this._NumberOfAdults != value))
				{
					this.OnNumberOfAdultsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfAdults = value;
					this.SendPropertyChanged("NumberOfAdults");
					this.OnNumberOfAdultsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfChildren", DbType="TinyInt NOT NULL")]
		public byte NumberOfChildren
		{
			get
			{
				return this._NumberOfChildren;
			}
			set
			{
				if ((this._NumberOfChildren != value))
				{
					this.OnNumberOfChildrenChanging(value);
					this.SendPropertyChanging();
					this._NumberOfChildren = value;
					this.SendPropertyChanged("NumberOfChildren");
					this.OnNumberOfChildrenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReservationDetail_ReservationDetailBilling", Storage="_ReservationDetailBillings", ThisKey="ReservationDetailID", OtherKey="ReservationDetailID")]
		public EntitySet<ReservationDetailBilling> ReservationDetailBillings
		{
			get
			{
				return this._ReservationDetailBillings;
			}
			set
			{
				this._ReservationDetailBillings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Discount_ReservationDetail", Storage="_Discount", ThisKey="DiscountID", OtherKey="DiscountID", IsForeignKey=true)]
		public Discount Discount
		{
			get
			{
				return this._Discount.Entity;
			}
			set
			{
				Discount previousValue = this._Discount.Entity;
				if (((previousValue != value) 
							|| (this._Discount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Discount.Entity = null;
						previousValue.ReservationDetails.Remove(this);
					}
					this._Discount.Entity = value;
					if ((value != null))
					{
						value.ReservationDetails.Add(this);
						this._DiscountID = value.DiscountID;
					}
					else
					{
						this._DiscountID = default(Nullable<short>);
					}
					this.SendPropertyChanged("Discount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reservation_ReservationDetail", Storage="_Reservation", ThisKey="ReservationID", OtherKey="ReservationID", IsForeignKey=true)]
		public Reservation Reservation
		{
			get
			{
				return this._Reservation.Entity;
			}
			set
			{
				Reservation previousValue = this._Reservation.Entity;
				if (((previousValue != value) 
							|| (this._Reservation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Reservation.Entity = null;
						previousValue.ReservationDetails.Remove(this);
					}
					this._Reservation.Entity = value;
					if ((value != null))
					{
						value.ReservationDetails.Add(this);
						this._ReservationID = value.ReservationID;
					}
					else
					{
						this._ReservationID = default(short);
					}
					this.SendPropertyChanged("Reservation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_ReservationDetail", Storage="_Room", ThisKey="RoomID", OtherKey="RoomID", IsForeignKey=true)]
		public Room Room
		{
			get
			{
				return this._Room.Entity;
			}
			set
			{
				Room previousValue = this._Room.Entity;
				if (((previousValue != value) 
							|| (this._Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Room.Entity = null;
						previousValue.ReservationDetails.Remove(this);
					}
					this._Room.Entity = value;
					if ((value != null))
					{
						value.ReservationDetails.Add(this);
						this._RoomID = value.RoomID;
					}
					else
					{
						this._RoomID = default(short);
					}
					this.SendPropertyChanged("Room");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReservationDetailBillings(ReservationDetailBilling entity)
		{
			this.SendPropertyChanging();
			entity.ReservationDetail = this;
		}
		
		private void detach_ReservationDetailBillings(ReservationDetailBilling entity)
		{
			this.SendPropertyChanging();
			entity.ReservationDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReservationDetailBilling")]
	public partial class ReservationDetailBilling : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ReservationBillingID;
		
		private short _ReservationDetailID;
		
		private short _BillingCategoryID;
		
		private string _BillingDescription;
		
		private decimal _BillingAmount;
		
		private byte _BillingItemQty;
		
		private System.DateTime _BillingItemDate;
		
		private EntityRef<BillingCategory> _BillingCategory;
		
		private EntityRef<ReservationDetail> _ReservationDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReservationBillingIDChanging(short value);
    partial void OnReservationBillingIDChanged();
    partial void OnReservationDetailIDChanging(short value);
    partial void OnReservationDetailIDChanged();
    partial void OnBillingCategoryIDChanging(short value);
    partial void OnBillingCategoryIDChanged();
    partial void OnBillingDescriptionChanging(string value);
    partial void OnBillingDescriptionChanged();
    partial void OnBillingAmountChanging(decimal value);
    partial void OnBillingAmountChanged();
    partial void OnBillingItemQtyChanging(byte value);
    partial void OnBillingItemQtyChanged();
    partial void OnBillingItemDateChanging(System.DateTime value);
    partial void OnBillingItemDateChanged();
    #endregion
		
		public ReservationDetailBilling()
		{
			this._BillingCategory = default(EntityRef<BillingCategory>);
			this._ReservationDetail = default(EntityRef<ReservationDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationBillingID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ReservationBillingID
		{
			get
			{
				return this._ReservationBillingID;
			}
			set
			{
				if ((this._ReservationBillingID != value))
				{
					this.OnReservationBillingIDChanging(value);
					this.SendPropertyChanging();
					this._ReservationBillingID = value;
					this.SendPropertyChanged("ReservationBillingID");
					this.OnReservationBillingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationDetailID", DbType="SmallInt NOT NULL")]
		public short ReservationDetailID
		{
			get
			{
				return this._ReservationDetailID;
			}
			set
			{
				if ((this._ReservationDetailID != value))
				{
					if (this._ReservationDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReservationDetailIDChanging(value);
					this.SendPropertyChanging();
					this._ReservationDetailID = value;
					this.SendPropertyChanged("ReservationDetailID");
					this.OnReservationDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingCategoryID", DbType="SmallInt NOT NULL")]
		public short BillingCategoryID
		{
			get
			{
				return this._BillingCategoryID;
			}
			set
			{
				if ((this._BillingCategoryID != value))
				{
					if (this._BillingCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBillingCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._BillingCategoryID = value;
					this.SendPropertyChanged("BillingCategoryID");
					this.OnBillingCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingDescription", DbType="Char(30) NOT NULL", CanBeNull=false)]
		public string BillingDescription
		{
			get
			{
				return this._BillingDescription;
			}
			set
			{
				if ((this._BillingDescription != value))
				{
					this.OnBillingDescriptionChanging(value);
					this.SendPropertyChanging();
					this._BillingDescription = value;
					this.SendPropertyChanged("BillingDescription");
					this.OnBillingDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingAmount", DbType="SmallMoney NOT NULL")]
		public decimal BillingAmount
		{
			get
			{
				return this._BillingAmount;
			}
			set
			{
				if ((this._BillingAmount != value))
				{
					this.OnBillingAmountChanging(value);
					this.SendPropertyChanging();
					this._BillingAmount = value;
					this.SendPropertyChanged("BillingAmount");
					this.OnBillingAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingItemQty", DbType="TinyInt NOT NULL")]
		public byte BillingItemQty
		{
			get
			{
				return this._BillingItemQty;
			}
			set
			{
				if ((this._BillingItemQty != value))
				{
					this.OnBillingItemQtyChanging(value);
					this.SendPropertyChanging();
					this._BillingItemQty = value;
					this.SendPropertyChanged("BillingItemQty");
					this.OnBillingItemQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingItemDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime BillingItemDate
		{
			get
			{
				return this._BillingItemDate;
			}
			set
			{
				if ((this._BillingItemDate != value))
				{
					this.OnBillingItemDateChanging(value);
					this.SendPropertyChanging();
					this._BillingItemDate = value;
					this.SendPropertyChanged("BillingItemDate");
					this.OnBillingItemDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BillingCategory_ReservationDetailBilling", Storage="_BillingCategory", ThisKey="BillingCategoryID", OtherKey="BillingCategoryID", IsForeignKey=true)]
		public BillingCategory BillingCategory
		{
			get
			{
				return this._BillingCategory.Entity;
			}
			set
			{
				BillingCategory previousValue = this._BillingCategory.Entity;
				if (((previousValue != value) 
							|| (this._BillingCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BillingCategory.Entity = null;
						previousValue.ReservationDetailBillings.Remove(this);
					}
					this._BillingCategory.Entity = value;
					if ((value != null))
					{
						value.ReservationDetailBillings.Add(this);
						this._BillingCategoryID = value.BillingCategoryID;
					}
					else
					{
						this._BillingCategoryID = default(short);
					}
					this.SendPropertyChanged("BillingCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReservationDetail_ReservationDetailBilling", Storage="_ReservationDetail", ThisKey="ReservationDetailID", OtherKey="ReservationDetailID", IsForeignKey=true)]
		public ReservationDetail ReservationDetail
		{
			get
			{
				return this._ReservationDetail.Entity;
			}
			set
			{
				ReservationDetail previousValue = this._ReservationDetail.Entity;
				if (((previousValue != value) 
							|| (this._ReservationDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReservationDetail.Entity = null;
						previousValue.ReservationDetailBillings.Remove(this);
					}
					this._ReservationDetail.Entity = value;
					if ((value != null))
					{
						value.ReservationDetailBillings.Add(this);
						this._ReservationDetailID = value.ReservationDetailID;
					}
					else
					{
						this._ReservationDetailID = default(short);
					}
					this.SendPropertyChanged("ReservationDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Revenue")]
	public partial class Revenue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _RevenueID;
		
		private System.DateTime _RevenueDate;
		
		private decimal _RevenueAmount;
		
		private string _RevenueType;
		
		private short _HotelID;
		
		private short _RevenueCategoryID;
		
		private EntityRef<Hotel> _Hotel;
		
		private EntityRef<RevenueCategory> _RevenueCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRevenueIDChanging(short value);
    partial void OnRevenueIDChanged();
    partial void OnRevenueDateChanging(System.DateTime value);
    partial void OnRevenueDateChanged();
    partial void OnRevenueAmountChanging(decimal value);
    partial void OnRevenueAmountChanged();
    partial void OnRevenueTypeChanging(string value);
    partial void OnRevenueTypeChanged();
    partial void OnHotelIDChanging(short value);
    partial void OnHotelIDChanged();
    partial void OnRevenueCategoryIDChanging(short value);
    partial void OnRevenueCategoryIDChanged();
    #endregion
		
		public Revenue()
		{
			this._Hotel = default(EntityRef<Hotel>);
			this._RevenueCategory = default(EntityRef<RevenueCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevenueID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short RevenueID
		{
			get
			{
				return this._RevenueID;
			}
			set
			{
				if ((this._RevenueID != value))
				{
					this.OnRevenueIDChanging(value);
					this.SendPropertyChanging();
					this._RevenueID = value;
					this.SendPropertyChanged("RevenueID");
					this.OnRevenueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevenueDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime RevenueDate
		{
			get
			{
				return this._RevenueDate;
			}
			set
			{
				if ((this._RevenueDate != value))
				{
					this.OnRevenueDateChanging(value);
					this.SendPropertyChanging();
					this._RevenueDate = value;
					this.SendPropertyChanged("RevenueDate");
					this.OnRevenueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevenueAmount", DbType="SmallMoney NOT NULL")]
		public decimal RevenueAmount
		{
			get
			{
				return this._RevenueAmount;
			}
			set
			{
				if ((this._RevenueAmount != value))
				{
					this.OnRevenueAmountChanging(value);
					this.SendPropertyChanging();
					this._RevenueAmount = value;
					this.SendPropertyChanged("RevenueAmount");
					this.OnRevenueAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevenueType", DbType="Char(30) NOT NULL", CanBeNull=false)]
		public string RevenueType
		{
			get
			{
				return this._RevenueType;
			}
			set
			{
				if ((this._RevenueType != value))
				{
					this.OnRevenueTypeChanging(value);
					this.SendPropertyChanging();
					this._RevenueType = value;
					this.SendPropertyChanged("RevenueType");
					this.OnRevenueTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelID", DbType="SmallInt NOT NULL")]
		public short HotelID
		{
			get
			{
				return this._HotelID;
			}
			set
			{
				if ((this._HotelID != value))
				{
					if (this._Hotel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHotelIDChanging(value);
					this.SendPropertyChanging();
					this._HotelID = value;
					this.SendPropertyChanged("HotelID");
					this.OnHotelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevenueCategoryID", DbType="SmallInt NOT NULL")]
		public short RevenueCategoryID
		{
			get
			{
				return this._RevenueCategoryID;
			}
			set
			{
				if ((this._RevenueCategoryID != value))
				{
					if (this._RevenueCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRevenueCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._RevenueCategoryID = value;
					this.SendPropertyChanged("RevenueCategoryID");
					this.OnRevenueCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hotel_Revenue", Storage="_Hotel", ThisKey="HotelID", OtherKey="HotelID", IsForeignKey=true)]
		public Hotel Hotel
		{
			get
			{
				return this._Hotel.Entity;
			}
			set
			{
				Hotel previousValue = this._Hotel.Entity;
				if (((previousValue != value) 
							|| (this._Hotel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hotel.Entity = null;
						previousValue.Revenues.Remove(this);
					}
					this._Hotel.Entity = value;
					if ((value != null))
					{
						value.Revenues.Add(this);
						this._HotelID = value.HotelID;
					}
					else
					{
						this._HotelID = default(short);
					}
					this.SendPropertyChanged("Hotel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RevenueCategory_Revenue", Storage="_RevenueCategory", ThisKey="RevenueCategoryID", OtherKey="RevenueCategoryID", IsForeignKey=true)]
		public RevenueCategory RevenueCategory
		{
			get
			{
				return this._RevenueCategory.Entity;
			}
			set
			{
				RevenueCategory previousValue = this._RevenueCategory.Entity;
				if (((previousValue != value) 
							|| (this._RevenueCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RevenueCategory.Entity = null;
						previousValue.Revenues.Remove(this);
					}
					this._RevenueCategory.Entity = value;
					if ((value != null))
					{
						value.Revenues.Add(this);
						this._RevenueCategoryID = value.RevenueCategoryID;
					}
					else
					{
						this._RevenueCategoryID = default(short);
					}
					this.SendPropertyChanged("RevenueCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RevenueCategory")]
	public partial class RevenueCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _RevenueCategoryID;
		
		private string _RevenueCategoryDescription;
		
		private EntitySet<Revenue> _Revenues;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRevenueCategoryIDChanging(short value);
    partial void OnRevenueCategoryIDChanged();
    partial void OnRevenueCategoryDescriptionChanging(string value);
    partial void OnRevenueCategoryDescriptionChanged();
    #endregion
		
		public RevenueCategory()
		{
			this._Revenues = new EntitySet<Revenue>(new Action<Revenue>(this.attach_Revenues), new Action<Revenue>(this.detach_Revenues));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevenueCategoryID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short RevenueCategoryID
		{
			get
			{
				return this._RevenueCategoryID;
			}
			set
			{
				if ((this._RevenueCategoryID != value))
				{
					this.OnRevenueCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._RevenueCategoryID = value;
					this.SendPropertyChanged("RevenueCategoryID");
					this.OnRevenueCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevenueCategoryDescription", DbType="VarChar(30)")]
		public string RevenueCategoryDescription
		{
			get
			{
				return this._RevenueCategoryDescription;
			}
			set
			{
				if ((this._RevenueCategoryDescription != value))
				{
					this.OnRevenueCategoryDescriptionChanging(value);
					this.SendPropertyChanging();
					this._RevenueCategoryDescription = value;
					this.SendPropertyChanged("RevenueCategoryDescription");
					this.OnRevenueCategoryDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RevenueCategory_Revenue", Storage="_Revenues", ThisKey="RevenueCategoryID", OtherKey="RevenueCategoryID")]
		public EntitySet<Revenue> Revenues
		{
			get
			{
				return this._Revenues;
			}
			set
			{
				this._Revenues.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Revenues(Revenue entity)
		{
			this.SendPropertyChanging();
			entity.RevenueCategory = this;
		}
		
		private void detach_Revenues(Revenue entity)
		{
			this.SendPropertyChanging();
			entity.RevenueCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Room")]
	public partial class Room : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _RoomID;
		
		private short _HotelRoomTypeID;
		
		private string _RoomNumbers;
		
		private string _RoomDescription;
		
		private bool _RoomSmoking;
		
		private string _RoomBedConfiguration;
		
		private bool _RoomHandicap;
		
		private char _RoomStatus;
		
		private EntitySet<ReservationDetail> _ReservationDetails;
		
		private EntityRef<HotelRoomType> _HotelRoomType;
		
		private EntityRef<RoomStatus> _RoomStatus1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomIDChanging(short value);
    partial void OnRoomIDChanged();
    partial void OnHotelRoomTypeIDChanging(short value);
    partial void OnHotelRoomTypeIDChanged();
    partial void OnRoomNumbersChanging(string value);
    partial void OnRoomNumbersChanged();
    partial void OnRoomDescriptionChanging(string value);
    partial void OnRoomDescriptionChanged();
    partial void OnRoomSmokingChanging(bool value);
    partial void OnRoomSmokingChanged();
    partial void OnRoomBedConfigurationChanging(string value);
    partial void OnRoomBedConfigurationChanged();
    partial void OnRoomHandicapChanging(bool value);
    partial void OnRoomHandicapChanged();
    partial void OnRoomStatusChanging(char value);
    partial void OnRoomStatusChanged();
    #endregion
		
		public Room()
		{
			this._ReservationDetails = new EntitySet<ReservationDetail>(new Action<ReservationDetail>(this.attach_ReservationDetails), new Action<ReservationDetail>(this.detach_ReservationDetails));
			this._HotelRoomType = default(EntityRef<HotelRoomType>);
			this._RoomStatus1 = default(EntityRef<RoomStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelRoomTypeID", DbType="SmallInt NOT NULL")]
		public short HotelRoomTypeID
		{
			get
			{
				return this._HotelRoomTypeID;
			}
			set
			{
				if ((this._HotelRoomTypeID != value))
				{
					if (this._HotelRoomType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHotelRoomTypeIDChanging(value);
					this.SendPropertyChanging();
					this._HotelRoomTypeID = value;
					this.SendPropertyChanged("HotelRoomTypeID");
					this.OnHotelRoomTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomNumbers", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string RoomNumbers
		{
			get
			{
				return this._RoomNumbers;
			}
			set
			{
				if ((this._RoomNumbers != value))
				{
					this.OnRoomNumbersChanging(value);
					this.SendPropertyChanging();
					this._RoomNumbers = value;
					this.SendPropertyChanged("RoomNumbers");
					this.OnRoomNumbersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomDescription", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string RoomDescription
		{
			get
			{
				return this._RoomDescription;
			}
			set
			{
				if ((this._RoomDescription != value))
				{
					this.OnRoomDescriptionChanging(value);
					this.SendPropertyChanging();
					this._RoomDescription = value;
					this.SendPropertyChanged("RoomDescription");
					this.OnRoomDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomSmoking", DbType="Bit NOT NULL")]
		public bool RoomSmoking
		{
			get
			{
				return this._RoomSmoking;
			}
			set
			{
				if ((this._RoomSmoking != value))
				{
					this.OnRoomSmokingChanging(value);
					this.SendPropertyChanging();
					this._RoomSmoking = value;
					this.SendPropertyChanged("RoomSmoking");
					this.OnRoomSmokingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomBedConfiguration", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string RoomBedConfiguration
		{
			get
			{
				return this._RoomBedConfiguration;
			}
			set
			{
				if ((this._RoomBedConfiguration != value))
				{
					this.OnRoomBedConfigurationChanging(value);
					this.SendPropertyChanging();
					this._RoomBedConfiguration = value;
					this.SendPropertyChanged("RoomBedConfiguration");
					this.OnRoomBedConfigurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomHandicap", DbType="Bit NOT NULL")]
		public bool RoomHandicap
		{
			get
			{
				return this._RoomHandicap;
			}
			set
			{
				if ((this._RoomHandicap != value))
				{
					this.OnRoomHandicapChanging(value);
					this.SendPropertyChanging();
					this._RoomHandicap = value;
					this.SendPropertyChanged("RoomHandicap");
					this.OnRoomHandicapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomStatus", DbType="Char(1) NOT NULL")]
		public char RoomStatus
		{
			get
			{
				return this._RoomStatus;
			}
			set
			{
				if ((this._RoomStatus != value))
				{
					if (this._RoomStatus1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomStatusChanging(value);
					this.SendPropertyChanging();
					this._RoomStatus = value;
					this.SendPropertyChanged("RoomStatus");
					this.OnRoomStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_ReservationDetail", Storage="_ReservationDetails", ThisKey="RoomID", OtherKey="RoomID")]
		public EntitySet<ReservationDetail> ReservationDetails
		{
			get
			{
				return this._ReservationDetails;
			}
			set
			{
				this._ReservationDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HotelRoomType_Room", Storage="_HotelRoomType", ThisKey="HotelRoomTypeID", OtherKey="HotelRoomTypeID", IsForeignKey=true)]
		public HotelRoomType HotelRoomType
		{
			get
			{
				return this._HotelRoomType.Entity;
			}
			set
			{
				HotelRoomType previousValue = this._HotelRoomType.Entity;
				if (((previousValue != value) 
							|| (this._HotelRoomType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HotelRoomType.Entity = null;
						previousValue.Rooms.Remove(this);
					}
					this._HotelRoomType.Entity = value;
					if ((value != null))
					{
						value.Rooms.Add(this);
						this._HotelRoomTypeID = value.HotelRoomTypeID;
					}
					else
					{
						this._HotelRoomTypeID = default(short);
					}
					this.SendPropertyChanged("HotelRoomType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoomStatus_Room", Storage="_RoomStatus1", ThisKey="RoomStatus", OtherKey="Status", IsForeignKey=true)]
		public RoomStatus RoomStatus1
		{
			get
			{
				return this._RoomStatus1.Entity;
			}
			set
			{
				RoomStatus previousValue = this._RoomStatus1.Entity;
				if (((previousValue != value) 
							|| (this._RoomStatus1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoomStatus1.Entity = null;
						previousValue.Rooms.Remove(this);
					}
					this._RoomStatus1.Entity = value;
					if ((value != null))
					{
						value.Rooms.Add(this);
						this._RoomStatus = value.Status;
					}
					else
					{
						this._RoomStatus = default(char);
					}
					this.SendPropertyChanged("RoomStatus1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReservationDetails(ReservationDetail entity)
		{
			this.SendPropertyChanging();
			entity.Room = this;
		}
		
		private void detach_ReservationDetails(ReservationDetail entity)
		{
			this.SendPropertyChanging();
			entity.Room = null;
		}
	}
}
#pragma warning restore 1591
