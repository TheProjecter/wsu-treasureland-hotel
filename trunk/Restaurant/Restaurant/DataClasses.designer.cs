#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Restaurant
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TreasureLand")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDrinkPurchase(DrinkPurchase instance);
    partial void UpdateDrinkPurchase(DrinkPurchase instance);
    partial void DeleteDrinkPurchase(DrinkPurchase instance);
    partial void InsertDrink(Drink instance);
    partial void UpdateDrink(Drink instance);
    partial void DeleteDrink(Drink instance);
    partial void InsertDrinkPurchaseHistory(DrinkPurchaseHistory instance);
    partial void UpdateDrinkPurchaseHistory(DrinkPurchaseHistory instance);
    partial void DeleteDrinkPurchaseHistory(DrinkPurchaseHistory instance);
    partial void InsertFoodDrinkCategory(FoodDrinkCategory instance);
    partial void UpdateFoodDrinkCategory(FoodDrinkCategory instance);
    partial void DeleteFoodDrinkCategory(FoodDrinkCategory instance);
    partial void InsertIngredient(Ingredient instance);
    partial void UpdateIngredient(Ingredient instance);
    partial void DeleteIngredient(Ingredient instance);
    partial void InsertIngredientPurchase(IngredientPurchase instance);
    partial void UpdateIngredientPurchase(IngredientPurchase instance);
    partial void DeleteIngredientPurchase(IngredientPurchase instance);
    partial void InsertIngredientPurchaseHistory(IngredientPurchaseHistory instance);
    partial void UpdateIngredientPurchaseHistory(IngredientPurchaseHistory instance);
    partial void DeleteIngredientPurchaseHistory(IngredientPurchaseHistory instance);
    partial void InsertLineItem(LineItem instance);
    partial void UpdateLineItem(LineItem instance);
    partial void DeleteLineItem(LineItem instance);
    partial void InsertMenuItem(MenuItem instance);
    partial void UpdateMenuItem(MenuItem instance);
    partial void DeleteMenuItem(MenuItem instance);
    partial void InsertMenuItemIngredient(MenuItemIngredient instance);
    partial void UpdateMenuItemIngredient(MenuItemIngredient instance);
    partial void DeleteMenuItemIngredient(MenuItemIngredient instance);
    partial void InsertReservationDetailBilling(ReservationDetailBilling instance);
    partial void UpdateReservationDetailBilling(ReservationDetailBilling instance);
    partial void DeleteReservationDetailBilling(ReservationDetailBilling instance);
    partial void InsertReservationDetail(ReservationDetail instance);
    partial void UpdateReservationDetail(ReservationDetail instance);
    partial void DeleteReservationDetail(ReservationDetail instance);
    partial void InsertRoom(Room instance);
    partial void UpdateRoom(Room instance);
    partial void DeleteRoom(Room instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::Restaurant.Properties.Settings.Default.TreasureLandConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DrinkPurchase> DrinkPurchases
		{
			get
			{
				return this.GetTable<DrinkPurchase>();
			}
		}
		
		public System.Data.Linq.Table<Drink> Drinks
		{
			get
			{
				return this.GetTable<Drink>();
			}
		}
		
		public System.Data.Linq.Table<DrinkPurchaseHistory> DrinkPurchaseHistories
		{
			get
			{
				return this.GetTable<DrinkPurchaseHistory>();
			}
		}
		
		public System.Data.Linq.Table<FoodDrinkCategory> FoodDrinkCategories
		{
			get
			{
				return this.GetTable<FoodDrinkCategory>();
			}
		}
		
		public System.Data.Linq.Table<Ingredient> Ingredients
		{
			get
			{
				return this.GetTable<Ingredient>();
			}
		}
		
		public System.Data.Linq.Table<IngredientPurchase> IngredientPurchases
		{
			get
			{
				return this.GetTable<IngredientPurchase>();
			}
		}
		
		public System.Data.Linq.Table<IngredientPurchaseHistory> IngredientPurchaseHistories
		{
			get
			{
				return this.GetTable<IngredientPurchaseHistory>();
			}
		}
		
		public System.Data.Linq.Table<LineItem> LineItems
		{
			get
			{
				return this.GetTable<LineItem>();
			}
		}
		
		public System.Data.Linq.Table<MenuItem> MenuItems
		{
			get
			{
				return this.GetTable<MenuItem>();
			}
		}
		
		public System.Data.Linq.Table<MenuItemIngredient> MenuItemIngredients
		{
			get
			{
				return this.GetTable<MenuItemIngredient>();
			}
		}
		
		public System.Data.Linq.Table<ReservationDetailBilling> ReservationDetailBillings
		{
			get
			{
				return this.GetTable<ReservationDetailBilling>();
			}
		}
		
		public System.Data.Linq.Table<ReservationDetail> ReservationDetails
		{
			get
			{
				return this.GetTable<ReservationDetail>();
			}
		}
		
		public System.Data.Linq.Table<Room> Rooms
		{
			get
			{
				return this.GetTable<Room>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DrinkPurchase")]
	public partial class DrinkPurchase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _DrinkPurchaseID;
		
		private System.DateTime _DrinkPurchaseDate;
		
		private EntitySet<DrinkPurchaseHistory> _DrinkPurchaseHistories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDrinkPurchaseIDChanging(short value);
    partial void OnDrinkPurchaseIDChanged();
    partial void OnDrinkPurchaseDateChanging(System.DateTime value);
    partial void OnDrinkPurchaseDateChanged();
    #endregion
		
		public DrinkPurchase()
		{
			this._DrinkPurchaseHistories = new EntitySet<DrinkPurchaseHistory>(new Action<DrinkPurchaseHistory>(this.attach_DrinkPurchaseHistories), new Action<DrinkPurchaseHistory>(this.detach_DrinkPurchaseHistories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrinkPurchaseID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short DrinkPurchaseID
		{
			get
			{
				return this._DrinkPurchaseID;
			}
			set
			{
				if ((this._DrinkPurchaseID != value))
				{
					this.OnDrinkPurchaseIDChanging(value);
					this.SendPropertyChanging();
					this._DrinkPurchaseID = value;
					this.SendPropertyChanged("DrinkPurchaseID");
					this.OnDrinkPurchaseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrinkPurchaseDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime DrinkPurchaseDate
		{
			get
			{
				return this._DrinkPurchaseDate;
			}
			set
			{
				if ((this._DrinkPurchaseDate != value))
				{
					this.OnDrinkPurchaseDateChanging(value);
					this.SendPropertyChanging();
					this._DrinkPurchaseDate = value;
					this.SendPropertyChanged("DrinkPurchaseDate");
					this.OnDrinkPurchaseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DrinkPurchase_DrinkPurchaseHistory", Storage="_DrinkPurchaseHistories", ThisKey="DrinkPurchaseID", OtherKey="DrinkPurchaseID")]
		public EntitySet<DrinkPurchaseHistory> DrinkPurchaseHistories
		{
			get
			{
				return this._DrinkPurchaseHistories;
			}
			set
			{
				this._DrinkPurchaseHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DrinkPurchaseHistories(DrinkPurchaseHistory entity)
		{
			this.SendPropertyChanging();
			entity.DrinkPurchase = this;
		}
		
		private void detach_DrinkPurchaseHistories(DrinkPurchaseHistory entity)
		{
			this.SendPropertyChanging();
			entity.DrinkPurchase = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Drink")]
	public partial class Drink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _DrinkID;
		
		private short _FoodDrinkCategoryID;
		
		private short _DrinkCategoryID;
		
		private string _DrinkName;
		
		private decimal _DrinkRetailSalePrice;
		
		private EntitySet<DrinkPurchaseHistory> _DrinkPurchaseHistories;
		
		private EntityRef<FoodDrinkCategory> _FoodDrinkCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDrinkIDChanging(short value);
    partial void OnDrinkIDChanged();
    partial void OnFoodDrinkCategoryIDChanging(short value);
    partial void OnFoodDrinkCategoryIDChanged();
    partial void OnDrinkCategoryIDChanging(short value);
    partial void OnDrinkCategoryIDChanged();
    partial void OnDrinkNameChanging(string value);
    partial void OnDrinkNameChanged();
    partial void OnDrinkRetailSalePriceChanging(decimal value);
    partial void OnDrinkRetailSalePriceChanged();
    #endregion
		
		public Drink()
		{
			this._DrinkPurchaseHistories = new EntitySet<DrinkPurchaseHistory>(new Action<DrinkPurchaseHistory>(this.attach_DrinkPurchaseHistories), new Action<DrinkPurchaseHistory>(this.detach_DrinkPurchaseHistories));
			this._FoodDrinkCategory = default(EntityRef<FoodDrinkCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrinkID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short DrinkID
		{
			get
			{
				return this._DrinkID;
			}
			set
			{
				if ((this._DrinkID != value))
				{
					this.OnDrinkIDChanging(value);
					this.SendPropertyChanging();
					this._DrinkID = value;
					this.SendPropertyChanged("DrinkID");
					this.OnDrinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodDrinkCategoryID", DbType="SmallInt NOT NULL")]
		public short FoodDrinkCategoryID
		{
			get
			{
				return this._FoodDrinkCategoryID;
			}
			set
			{
				if ((this._FoodDrinkCategoryID != value))
				{
					if (this._FoodDrinkCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFoodDrinkCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._FoodDrinkCategoryID = value;
					this.SendPropertyChanged("FoodDrinkCategoryID");
					this.OnFoodDrinkCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrinkCategoryID", DbType="SmallInt NOT NULL")]
		public short DrinkCategoryID
		{
			get
			{
				return this._DrinkCategoryID;
			}
			set
			{
				if ((this._DrinkCategoryID != value))
				{
					this.OnDrinkCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._DrinkCategoryID = value;
					this.SendPropertyChanged("DrinkCategoryID");
					this.OnDrinkCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrinkName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string DrinkName
		{
			get
			{
				return this._DrinkName;
			}
			set
			{
				if ((this._DrinkName != value))
				{
					this.OnDrinkNameChanging(value);
					this.SendPropertyChanging();
					this._DrinkName = value;
					this.SendPropertyChanged("DrinkName");
					this.OnDrinkNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrinkRetailSalePrice", DbType="SmallMoney NOT NULL")]
		public decimal DrinkRetailSalePrice
		{
			get
			{
				return this._DrinkRetailSalePrice;
			}
			set
			{
				if ((this._DrinkRetailSalePrice != value))
				{
					this.OnDrinkRetailSalePriceChanging(value);
					this.SendPropertyChanging();
					this._DrinkRetailSalePrice = value;
					this.SendPropertyChanged("DrinkRetailSalePrice");
					this.OnDrinkRetailSalePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Drink_DrinkPurchaseHistory", Storage="_DrinkPurchaseHistories", ThisKey="DrinkID", OtherKey="DrinkID")]
		public EntitySet<DrinkPurchaseHistory> DrinkPurchaseHistories
		{
			get
			{
				return this._DrinkPurchaseHistories;
			}
			set
			{
				this._DrinkPurchaseHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FoodDrinkCategory_Drink", Storage="_FoodDrinkCategory", ThisKey="FoodDrinkCategoryID", OtherKey="FoodDrinkCategoryID", IsForeignKey=true)]
		public FoodDrinkCategory FoodDrinkCategory
		{
			get
			{
				return this._FoodDrinkCategory.Entity;
			}
			set
			{
				FoodDrinkCategory previousValue = this._FoodDrinkCategory.Entity;
				if (((previousValue != value) 
							|| (this._FoodDrinkCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FoodDrinkCategory.Entity = null;
						previousValue.Drinks.Remove(this);
					}
					this._FoodDrinkCategory.Entity = value;
					if ((value != null))
					{
						value.Drinks.Add(this);
						this._FoodDrinkCategoryID = value.FoodDrinkCategoryID;
					}
					else
					{
						this._FoodDrinkCategoryID = default(short);
					}
					this.SendPropertyChanged("FoodDrinkCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DrinkPurchaseHistories(DrinkPurchaseHistory entity)
		{
			this.SendPropertyChanging();
			entity.Drink = this;
		}
		
		private void detach_DrinkPurchaseHistories(DrinkPurchaseHistory entity)
		{
			this.SendPropertyChanging();
			entity.Drink = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DrinkPurchaseHistory")]
	public partial class DrinkPurchaseHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DrinkPurchaseHistoryID;
		
		private short _DrinkPurchaseID;
		
		private decimal _DrinkPurchaseHistoryWholesalePrice;
		
		private decimal _DrinkPurchaseHistoryQty;
		
		private short _DrinkID;
		
		private EntityRef<Drink> _Drink;
		
		private EntityRef<DrinkPurchase> _DrinkPurchase;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDrinkPurchaseHistoryIDChanging(int value);
    partial void OnDrinkPurchaseHistoryIDChanged();
    partial void OnDrinkPurchaseIDChanging(short value);
    partial void OnDrinkPurchaseIDChanged();
    partial void OnDrinkPurchaseHistoryWholesalePriceChanging(decimal value);
    partial void OnDrinkPurchaseHistoryWholesalePriceChanged();
    partial void OnDrinkPurchaseHistoryQtyChanging(decimal value);
    partial void OnDrinkPurchaseHistoryQtyChanged();
    partial void OnDrinkIDChanging(short value);
    partial void OnDrinkIDChanged();
    #endregion
		
		public DrinkPurchaseHistory()
		{
			this._Drink = default(EntityRef<Drink>);
			this._DrinkPurchase = default(EntityRef<DrinkPurchase>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrinkPurchaseHistoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DrinkPurchaseHistoryID
		{
			get
			{
				return this._DrinkPurchaseHistoryID;
			}
			set
			{
				if ((this._DrinkPurchaseHistoryID != value))
				{
					this.OnDrinkPurchaseHistoryIDChanging(value);
					this.SendPropertyChanging();
					this._DrinkPurchaseHistoryID = value;
					this.SendPropertyChanged("DrinkPurchaseHistoryID");
					this.OnDrinkPurchaseHistoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrinkPurchaseID", DbType="SmallInt NOT NULL")]
		public short DrinkPurchaseID
		{
			get
			{
				return this._DrinkPurchaseID;
			}
			set
			{
				if ((this._DrinkPurchaseID != value))
				{
					if (this._DrinkPurchase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDrinkPurchaseIDChanging(value);
					this.SendPropertyChanging();
					this._DrinkPurchaseID = value;
					this.SendPropertyChanged("DrinkPurchaseID");
					this.OnDrinkPurchaseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrinkPurchaseHistoryWholesalePrice", DbType="SmallMoney NOT NULL")]
		public decimal DrinkPurchaseHistoryWholesalePrice
		{
			get
			{
				return this._DrinkPurchaseHistoryWholesalePrice;
			}
			set
			{
				if ((this._DrinkPurchaseHistoryWholesalePrice != value))
				{
					this.OnDrinkPurchaseHistoryWholesalePriceChanging(value);
					this.SendPropertyChanging();
					this._DrinkPurchaseHistoryWholesalePrice = value;
					this.SendPropertyChanged("DrinkPurchaseHistoryWholesalePrice");
					this.OnDrinkPurchaseHistoryWholesalePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrinkPurchaseHistoryQty", DbType="SmallMoney NOT NULL")]
		public decimal DrinkPurchaseHistoryQty
		{
			get
			{
				return this._DrinkPurchaseHistoryQty;
			}
			set
			{
				if ((this._DrinkPurchaseHistoryQty != value))
				{
					this.OnDrinkPurchaseHistoryQtyChanging(value);
					this.SendPropertyChanging();
					this._DrinkPurchaseHistoryQty = value;
					this.SendPropertyChanged("DrinkPurchaseHistoryQty");
					this.OnDrinkPurchaseHistoryQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrinkID", DbType="SmallInt NOT NULL")]
		public short DrinkID
		{
			get
			{
				return this._DrinkID;
			}
			set
			{
				if ((this._DrinkID != value))
				{
					if (this._Drink.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDrinkIDChanging(value);
					this.SendPropertyChanging();
					this._DrinkID = value;
					this.SendPropertyChanged("DrinkID");
					this.OnDrinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Drink_DrinkPurchaseHistory", Storage="_Drink", ThisKey="DrinkID", OtherKey="DrinkID", IsForeignKey=true)]
		public Drink Drink
		{
			get
			{
				return this._Drink.Entity;
			}
			set
			{
				Drink previousValue = this._Drink.Entity;
				if (((previousValue != value) 
							|| (this._Drink.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Drink.Entity = null;
						previousValue.DrinkPurchaseHistories.Remove(this);
					}
					this._Drink.Entity = value;
					if ((value != null))
					{
						value.DrinkPurchaseHistories.Add(this);
						this._DrinkID = value.DrinkID;
					}
					else
					{
						this._DrinkID = default(short);
					}
					this.SendPropertyChanged("Drink");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DrinkPurchase_DrinkPurchaseHistory", Storage="_DrinkPurchase", ThisKey="DrinkPurchaseID", OtherKey="DrinkPurchaseID", IsForeignKey=true)]
		public DrinkPurchase DrinkPurchase
		{
			get
			{
				return this._DrinkPurchase.Entity;
			}
			set
			{
				DrinkPurchase previousValue = this._DrinkPurchase.Entity;
				if (((previousValue != value) 
							|| (this._DrinkPurchase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DrinkPurchase.Entity = null;
						previousValue.DrinkPurchaseHistories.Remove(this);
					}
					this._DrinkPurchase.Entity = value;
					if ((value != null))
					{
						value.DrinkPurchaseHistories.Add(this);
						this._DrinkPurchaseID = value.DrinkPurchaseID;
					}
					else
					{
						this._DrinkPurchaseID = default(short);
					}
					this.SendPropertyChanged("DrinkPurchase");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FoodDrinkCategory")]
	public partial class FoodDrinkCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _FoodDrinkCategoryID;
		
		private string _FoodDrinkCategoryName;
		
		private bool _FoodDrinkCategoryTaxable;
		
		private EntitySet<Drink> _Drinks;
		
		private EntitySet<LineItem> _LineItems;
		
		private EntitySet<MenuItem> _MenuItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFoodDrinkCategoryIDChanging(short value);
    partial void OnFoodDrinkCategoryIDChanged();
    partial void OnFoodDrinkCategoryNameChanging(string value);
    partial void OnFoodDrinkCategoryNameChanged();
    partial void OnFoodDrinkCategoryTaxableChanging(bool value);
    partial void OnFoodDrinkCategoryTaxableChanged();
    #endregion
		
		public FoodDrinkCategory()
		{
			this._Drinks = new EntitySet<Drink>(new Action<Drink>(this.attach_Drinks), new Action<Drink>(this.detach_Drinks));
			this._LineItems = new EntitySet<LineItem>(new Action<LineItem>(this.attach_LineItems), new Action<LineItem>(this.detach_LineItems));
			this._MenuItems = new EntitySet<MenuItem>(new Action<MenuItem>(this.attach_MenuItems), new Action<MenuItem>(this.detach_MenuItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodDrinkCategoryID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short FoodDrinkCategoryID
		{
			get
			{
				return this._FoodDrinkCategoryID;
			}
			set
			{
				if ((this._FoodDrinkCategoryID != value))
				{
					this.OnFoodDrinkCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._FoodDrinkCategoryID = value;
					this.SendPropertyChanged("FoodDrinkCategoryID");
					this.OnFoodDrinkCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodDrinkCategoryName", DbType="VarChar(50)")]
		public string FoodDrinkCategoryName
		{
			get
			{
				return this._FoodDrinkCategoryName;
			}
			set
			{
				if ((this._FoodDrinkCategoryName != value))
				{
					this.OnFoodDrinkCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._FoodDrinkCategoryName = value;
					this.SendPropertyChanged("FoodDrinkCategoryName");
					this.OnFoodDrinkCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodDrinkCategoryTaxable", DbType="Bit NOT NULL")]
		public bool FoodDrinkCategoryTaxable
		{
			get
			{
				return this._FoodDrinkCategoryTaxable;
			}
			set
			{
				if ((this._FoodDrinkCategoryTaxable != value))
				{
					this.OnFoodDrinkCategoryTaxableChanging(value);
					this.SendPropertyChanging();
					this._FoodDrinkCategoryTaxable = value;
					this.SendPropertyChanged("FoodDrinkCategoryTaxable");
					this.OnFoodDrinkCategoryTaxableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FoodDrinkCategory_Drink", Storage="_Drinks", ThisKey="FoodDrinkCategoryID", OtherKey="FoodDrinkCategoryID")]
		public EntitySet<Drink> Drinks
		{
			get
			{
				return this._Drinks;
			}
			set
			{
				this._Drinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FoodDrinkCategory_LineItem", Storage="_LineItems", ThisKey="FoodDrinkCategoryID", OtherKey="FoodDrinkCategoryID")]
		public EntitySet<LineItem> LineItems
		{
			get
			{
				return this._LineItems;
			}
			set
			{
				this._LineItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FoodDrinkCategory_MenuItem", Storage="_MenuItems", ThisKey="FoodDrinkCategoryID", OtherKey="FoodDrinkCategoryID")]
		public EntitySet<MenuItem> MenuItems
		{
			get
			{
				return this._MenuItems;
			}
			set
			{
				this._MenuItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Drinks(Drink entity)
		{
			this.SendPropertyChanging();
			entity.FoodDrinkCategory = this;
		}
		
		private void detach_Drinks(Drink entity)
		{
			this.SendPropertyChanging();
			entity.FoodDrinkCategory = null;
		}
		
		private void attach_LineItems(LineItem entity)
		{
			this.SendPropertyChanging();
			entity.FoodDrinkCategory = this;
		}
		
		private void detach_LineItems(LineItem entity)
		{
			this.SendPropertyChanging();
			entity.FoodDrinkCategory = null;
		}
		
		private void attach_MenuItems(MenuItem entity)
		{
			this.SendPropertyChanging();
			entity.FoodDrinkCategory = this;
		}
		
		private void detach_MenuItems(MenuItem entity)
		{
			this.SendPropertyChanging();
			entity.FoodDrinkCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ingredient")]
	public partial class Ingredient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _IngredientID;
		
		private string _IngredientName;
		
		private EntitySet<IngredientPurchaseHistory> _IngredientPurchaseHistories;
		
		private EntitySet<MenuItemIngredient> _MenuItemIngredients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIngredientIDChanging(short value);
    partial void OnIngredientIDChanged();
    partial void OnIngredientNameChanging(string value);
    partial void OnIngredientNameChanged();
    #endregion
		
		public Ingredient()
		{
			this._IngredientPurchaseHistories = new EntitySet<IngredientPurchaseHistory>(new Action<IngredientPurchaseHistory>(this.attach_IngredientPurchaseHistories), new Action<IngredientPurchaseHistory>(this.detach_IngredientPurchaseHistories));
			this._MenuItemIngredients = new EntitySet<MenuItemIngredient>(new Action<MenuItemIngredient>(this.attach_MenuItemIngredients), new Action<MenuItemIngredient>(this.detach_MenuItemIngredients));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IngredientID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short IngredientID
		{
			get
			{
				return this._IngredientID;
			}
			set
			{
				if ((this._IngredientID != value))
				{
					this.OnIngredientIDChanging(value);
					this.SendPropertyChanging();
					this._IngredientID = value;
					this.SendPropertyChanged("IngredientID");
					this.OnIngredientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IngredientName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string IngredientName
		{
			get
			{
				return this._IngredientName;
			}
			set
			{
				if ((this._IngredientName != value))
				{
					this.OnIngredientNameChanging(value);
					this.SendPropertyChanging();
					this._IngredientName = value;
					this.SendPropertyChanged("IngredientName");
					this.OnIngredientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ingredient_IngredientPurchaseHistory", Storage="_IngredientPurchaseHistories", ThisKey="IngredientID", OtherKey="IngredientID")]
		public EntitySet<IngredientPurchaseHistory> IngredientPurchaseHistories
		{
			get
			{
				return this._IngredientPurchaseHistories;
			}
			set
			{
				this._IngredientPurchaseHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ingredient_MenuItemIngredient", Storage="_MenuItemIngredients", ThisKey="IngredientID", OtherKey="IngredientID")]
		public EntitySet<MenuItemIngredient> MenuItemIngredients
		{
			get
			{
				return this._MenuItemIngredients;
			}
			set
			{
				this._MenuItemIngredients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IngredientPurchaseHistories(IngredientPurchaseHistory entity)
		{
			this.SendPropertyChanging();
			entity.Ingredient = this;
		}
		
		private void detach_IngredientPurchaseHistories(IngredientPurchaseHistory entity)
		{
			this.SendPropertyChanging();
			entity.Ingredient = null;
		}
		
		private void attach_MenuItemIngredients(MenuItemIngredient entity)
		{
			this.SendPropertyChanging();
			entity.Ingredient = this;
		}
		
		private void detach_MenuItemIngredients(MenuItemIngredient entity)
		{
			this.SendPropertyChanging();
			entity.Ingredient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IngredientPurchase")]
	public partial class IngredientPurchase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _PurchaseID;
		
		private System.DateTime _PurchaseDate;
		
		private EntitySet<IngredientPurchaseHistory> _IngredientPurchaseHistories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPurchaseIDChanging(short value);
    partial void OnPurchaseIDChanged();
    partial void OnPurchaseDateChanging(System.DateTime value);
    partial void OnPurchaseDateChanged();
    #endregion
		
		public IngredientPurchase()
		{
			this._IngredientPurchaseHistories = new EntitySet<IngredientPurchaseHistory>(new Action<IngredientPurchaseHistory>(this.attach_IngredientPurchaseHistories), new Action<IngredientPurchaseHistory>(this.detach_IngredientPurchaseHistories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short PurchaseID
		{
			get
			{
				return this._PurchaseID;
			}
			set
			{
				if ((this._PurchaseID != value))
				{
					this.OnPurchaseIDChanging(value);
					this.SendPropertyChanging();
					this._PurchaseID = value;
					this.SendPropertyChanged("PurchaseID");
					this.OnPurchaseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime PurchaseDate
		{
			get
			{
				return this._PurchaseDate;
			}
			set
			{
				if ((this._PurchaseDate != value))
				{
					this.OnPurchaseDateChanging(value);
					this.SendPropertyChanging();
					this._PurchaseDate = value;
					this.SendPropertyChanged("PurchaseDate");
					this.OnPurchaseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IngredientPurchase_IngredientPurchaseHistory", Storage="_IngredientPurchaseHistories", ThisKey="PurchaseID", OtherKey="PurchaseID")]
		public EntitySet<IngredientPurchaseHistory> IngredientPurchaseHistories
		{
			get
			{
				return this._IngredientPurchaseHistories;
			}
			set
			{
				this._IngredientPurchaseHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IngredientPurchaseHistories(IngredientPurchaseHistory entity)
		{
			this.SendPropertyChanging();
			entity.IngredientPurchase = this;
		}
		
		private void detach_IngredientPurchaseHistories(IngredientPurchaseHistory entity)
		{
			this.SendPropertyChanging();
			entity.IngredientPurchase = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IngredientPurchaseHistory")]
	public partial class IngredientPurchaseHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _IngredientPurchaseHistoryID;
		
		private short _IngredientID;
		
		private short _PurchaseID;
		
		private decimal _IngredientPurchaseHistoryPrice;
		
		private short _IngredientPurchaseHistoryQty;
		
		private EntityRef<Ingredient> _Ingredient;
		
		private EntityRef<IngredientPurchase> _IngredientPurchase;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIngredientPurchaseHistoryIDChanging(short value);
    partial void OnIngredientPurchaseHistoryIDChanged();
    partial void OnIngredientIDChanging(short value);
    partial void OnIngredientIDChanged();
    partial void OnPurchaseIDChanging(short value);
    partial void OnPurchaseIDChanged();
    partial void OnIngredientPurchaseHistoryPriceChanging(decimal value);
    partial void OnIngredientPurchaseHistoryPriceChanged();
    partial void OnIngredientPurchaseHistoryQtyChanging(short value);
    partial void OnIngredientPurchaseHistoryQtyChanged();
    #endregion
		
		public IngredientPurchaseHistory()
		{
			this._Ingredient = default(EntityRef<Ingredient>);
			this._IngredientPurchase = default(EntityRef<IngredientPurchase>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IngredientPurchaseHistoryID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short IngredientPurchaseHistoryID
		{
			get
			{
				return this._IngredientPurchaseHistoryID;
			}
			set
			{
				if ((this._IngredientPurchaseHistoryID != value))
				{
					this.OnIngredientPurchaseHistoryIDChanging(value);
					this.SendPropertyChanging();
					this._IngredientPurchaseHistoryID = value;
					this.SendPropertyChanged("IngredientPurchaseHistoryID");
					this.OnIngredientPurchaseHistoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IngredientID", DbType="SmallInt NOT NULL")]
		public short IngredientID
		{
			get
			{
				return this._IngredientID;
			}
			set
			{
				if ((this._IngredientID != value))
				{
					if (this._Ingredient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIngredientIDChanging(value);
					this.SendPropertyChanging();
					this._IngredientID = value;
					this.SendPropertyChanged("IngredientID");
					this.OnIngredientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseID", DbType="SmallInt NOT NULL")]
		public short PurchaseID
		{
			get
			{
				return this._PurchaseID;
			}
			set
			{
				if ((this._PurchaseID != value))
				{
					if (this._IngredientPurchase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPurchaseIDChanging(value);
					this.SendPropertyChanging();
					this._PurchaseID = value;
					this.SendPropertyChanged("PurchaseID");
					this.OnPurchaseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IngredientPurchaseHistoryPrice", DbType="SmallMoney NOT NULL")]
		public decimal IngredientPurchaseHistoryPrice
		{
			get
			{
				return this._IngredientPurchaseHistoryPrice;
			}
			set
			{
				if ((this._IngredientPurchaseHistoryPrice != value))
				{
					this.OnIngredientPurchaseHistoryPriceChanging(value);
					this.SendPropertyChanging();
					this._IngredientPurchaseHistoryPrice = value;
					this.SendPropertyChanged("IngredientPurchaseHistoryPrice");
					this.OnIngredientPurchaseHistoryPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IngredientPurchaseHistoryQty", DbType="SmallInt NOT NULL")]
		public short IngredientPurchaseHistoryQty
		{
			get
			{
				return this._IngredientPurchaseHistoryQty;
			}
			set
			{
				if ((this._IngredientPurchaseHistoryQty != value))
				{
					this.OnIngredientPurchaseHistoryQtyChanging(value);
					this.SendPropertyChanging();
					this._IngredientPurchaseHistoryQty = value;
					this.SendPropertyChanged("IngredientPurchaseHistoryQty");
					this.OnIngredientPurchaseHistoryQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ingredient_IngredientPurchaseHistory", Storage="_Ingredient", ThisKey="IngredientID", OtherKey="IngredientID", IsForeignKey=true)]
		public Ingredient Ingredient
		{
			get
			{
				return this._Ingredient.Entity;
			}
			set
			{
				Ingredient previousValue = this._Ingredient.Entity;
				if (((previousValue != value) 
							|| (this._Ingredient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ingredient.Entity = null;
						previousValue.IngredientPurchaseHistories.Remove(this);
					}
					this._Ingredient.Entity = value;
					if ((value != null))
					{
						value.IngredientPurchaseHistories.Add(this);
						this._IngredientID = value.IngredientID;
					}
					else
					{
						this._IngredientID = default(short);
					}
					this.SendPropertyChanged("Ingredient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IngredientPurchase_IngredientPurchaseHistory", Storage="_IngredientPurchase", ThisKey="PurchaseID", OtherKey="PurchaseID", IsForeignKey=true)]
		public IngredientPurchase IngredientPurchase
		{
			get
			{
				return this._IngredientPurchase.Entity;
			}
			set
			{
				IngredientPurchase previousValue = this._IngredientPurchase.Entity;
				if (((previousValue != value) 
							|| (this._IngredientPurchase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IngredientPurchase.Entity = null;
						previousValue.IngredientPurchaseHistories.Remove(this);
					}
					this._IngredientPurchase.Entity = value;
					if ((value != null))
					{
						value.IngredientPurchaseHistories.Add(this);
						this._PurchaseID = value.PurchaseID;
					}
					else
					{
						this._PurchaseID = default(short);
					}
					this.SendPropertyChanged("IngredientPurchase");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LineItem")]
	public partial class LineItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LineItemTransactionID;
		
		private short _ReservationBillingID;
		
		private System.Nullable<short> _FoodDrinkCategoryID;
		
		private decimal _LineItemAmount;
		
		private EntityRef<FoodDrinkCategory> _FoodDrinkCategory;
		
		private EntityRef<ReservationDetailBilling> _ReservationDetailBilling;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLineItemTransactionIDChanging(int value);
    partial void OnLineItemTransactionIDChanged();
    partial void OnReservationBillingIDChanging(short value);
    partial void OnReservationBillingIDChanged();
    partial void OnFoodDrinkCategoryIDChanging(System.Nullable<short> value);
    partial void OnFoodDrinkCategoryIDChanged();
    partial void OnLineItemAmountChanging(decimal value);
    partial void OnLineItemAmountChanged();
    #endregion
		
		public LineItem()
		{
			this._FoodDrinkCategory = default(EntityRef<FoodDrinkCategory>);
			this._ReservationDetailBilling = default(EntityRef<ReservationDetailBilling>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineItemTransactionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LineItemTransactionID
		{
			get
			{
				return this._LineItemTransactionID;
			}
			set
			{
				if ((this._LineItemTransactionID != value))
				{
					this.OnLineItemTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._LineItemTransactionID = value;
					this.SendPropertyChanged("LineItemTransactionID");
					this.OnLineItemTransactionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationBillingID", DbType="SmallInt NOT NULL")]
		public short ReservationBillingID
		{
			get
			{
				return this._ReservationBillingID;
			}
			set
			{
				if ((this._ReservationBillingID != value))
				{
					if (this._ReservationDetailBilling.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReservationBillingIDChanging(value);
					this.SendPropertyChanging();
					this._ReservationBillingID = value;
					this.SendPropertyChanged("ReservationBillingID");
					this.OnReservationBillingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodDrinkCategoryID", DbType="SmallInt")]
		public System.Nullable<short> FoodDrinkCategoryID
		{
			get
			{
				return this._FoodDrinkCategoryID;
			}
			set
			{
				if ((this._FoodDrinkCategoryID != value))
				{
					if (this._FoodDrinkCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFoodDrinkCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._FoodDrinkCategoryID = value;
					this.SendPropertyChanged("FoodDrinkCategoryID");
					this.OnFoodDrinkCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineItemAmount", DbType="SmallMoney NOT NULL")]
		public decimal LineItemAmount
		{
			get
			{
				return this._LineItemAmount;
			}
			set
			{
				if ((this._LineItemAmount != value))
				{
					this.OnLineItemAmountChanging(value);
					this.SendPropertyChanging();
					this._LineItemAmount = value;
					this.SendPropertyChanged("LineItemAmount");
					this.OnLineItemAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FoodDrinkCategory_LineItem", Storage="_FoodDrinkCategory", ThisKey="FoodDrinkCategoryID", OtherKey="FoodDrinkCategoryID", IsForeignKey=true)]
		public FoodDrinkCategory FoodDrinkCategory
		{
			get
			{
				return this._FoodDrinkCategory.Entity;
			}
			set
			{
				FoodDrinkCategory previousValue = this._FoodDrinkCategory.Entity;
				if (((previousValue != value) 
							|| (this._FoodDrinkCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FoodDrinkCategory.Entity = null;
						previousValue.LineItems.Remove(this);
					}
					this._FoodDrinkCategory.Entity = value;
					if ((value != null))
					{
						value.LineItems.Add(this);
						this._FoodDrinkCategoryID = value.FoodDrinkCategoryID;
					}
					else
					{
						this._FoodDrinkCategoryID = default(Nullable<short>);
					}
					this.SendPropertyChanged("FoodDrinkCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReservationDetailBilling_LineItem", Storage="_ReservationDetailBilling", ThisKey="ReservationBillingID", OtherKey="ReservationBillingID", IsForeignKey=true)]
		public ReservationDetailBilling ReservationDetailBilling
		{
			get
			{
				return this._ReservationDetailBilling.Entity;
			}
			set
			{
				ReservationDetailBilling previousValue = this._ReservationDetailBilling.Entity;
				if (((previousValue != value) 
							|| (this._ReservationDetailBilling.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReservationDetailBilling.Entity = null;
						previousValue.LineItems.Remove(this);
					}
					this._ReservationDetailBilling.Entity = value;
					if ((value != null))
					{
						value.LineItems.Add(this);
						this._ReservationBillingID = value.ReservationBillingID;
					}
					else
					{
						this._ReservationBillingID = default(short);
					}
					this.SendPropertyChanged("ReservationDetailBilling");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MenuItem")]
	public partial class MenuItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _MenuItemID;
		
		private short _FoodDrinkCategoryID;
		
		private string _MenuItemName;
		
		private decimal _MenuItemPrice;
		
		private EntitySet<MenuItemIngredient> _MenuItemIngredients;
		
		private EntityRef<FoodDrinkCategory> _FoodDrinkCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMenuItemIDChanging(short value);
    partial void OnMenuItemIDChanged();
    partial void OnFoodDrinkCategoryIDChanging(short value);
    partial void OnFoodDrinkCategoryIDChanged();
    partial void OnMenuItemNameChanging(string value);
    partial void OnMenuItemNameChanged();
    partial void OnMenuItemPriceChanging(decimal value);
    partial void OnMenuItemPriceChanged();
    #endregion
		
		public MenuItem()
		{
			this._MenuItemIngredients = new EntitySet<MenuItemIngredient>(new Action<MenuItemIngredient>(this.attach_MenuItemIngredients), new Action<MenuItemIngredient>(this.detach_MenuItemIngredients));
			this._FoodDrinkCategory = default(EntityRef<FoodDrinkCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuItemID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short MenuItemID
		{
			get
			{
				return this._MenuItemID;
			}
			set
			{
				if ((this._MenuItemID != value))
				{
					this.OnMenuItemIDChanging(value);
					this.SendPropertyChanging();
					this._MenuItemID = value;
					this.SendPropertyChanged("MenuItemID");
					this.OnMenuItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodDrinkCategoryID", DbType="SmallInt NOT NULL")]
		public short FoodDrinkCategoryID
		{
			get
			{
				return this._FoodDrinkCategoryID;
			}
			set
			{
				if ((this._FoodDrinkCategoryID != value))
				{
					if (this._FoodDrinkCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFoodDrinkCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._FoodDrinkCategoryID = value;
					this.SendPropertyChanged("FoodDrinkCategoryID");
					this.OnFoodDrinkCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuItemName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string MenuItemName
		{
			get
			{
				return this._MenuItemName;
			}
			set
			{
				if ((this._MenuItemName != value))
				{
					this.OnMenuItemNameChanging(value);
					this.SendPropertyChanging();
					this._MenuItemName = value;
					this.SendPropertyChanged("MenuItemName");
					this.OnMenuItemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuItemPrice", DbType="SmallMoney NOT NULL")]
		public decimal MenuItemPrice
		{
			get
			{
				return this._MenuItemPrice;
			}
			set
			{
				if ((this._MenuItemPrice != value))
				{
					this.OnMenuItemPriceChanging(value);
					this.SendPropertyChanging();
					this._MenuItemPrice = value;
					this.SendPropertyChanged("MenuItemPrice");
					this.OnMenuItemPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MenuItem_MenuItemIngredient", Storage="_MenuItemIngredients", ThisKey="MenuItemID", OtherKey="MenuItemID")]
		public EntitySet<MenuItemIngredient> MenuItemIngredients
		{
			get
			{
				return this._MenuItemIngredients;
			}
			set
			{
				this._MenuItemIngredients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FoodDrinkCategory_MenuItem", Storage="_FoodDrinkCategory", ThisKey="FoodDrinkCategoryID", OtherKey="FoodDrinkCategoryID", IsForeignKey=true)]
		public FoodDrinkCategory FoodDrinkCategory
		{
			get
			{
				return this._FoodDrinkCategory.Entity;
			}
			set
			{
				FoodDrinkCategory previousValue = this._FoodDrinkCategory.Entity;
				if (((previousValue != value) 
							|| (this._FoodDrinkCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FoodDrinkCategory.Entity = null;
						previousValue.MenuItems.Remove(this);
					}
					this._FoodDrinkCategory.Entity = value;
					if ((value != null))
					{
						value.MenuItems.Add(this);
						this._FoodDrinkCategoryID = value.FoodDrinkCategoryID;
					}
					else
					{
						this._FoodDrinkCategoryID = default(short);
					}
					this.SendPropertyChanged("FoodDrinkCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MenuItemIngredients(MenuItemIngredient entity)
		{
			this.SendPropertyChanging();
			entity.MenuItem = this;
		}
		
		private void detach_MenuItemIngredients(MenuItemIngredient entity)
		{
			this.SendPropertyChanging();
			entity.MenuItem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MenuItemIngredient")]
	public partial class MenuItemIngredient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _MenuItemIngredientID;
		
		private short _MenuItemID;
		
		private short _IngredientID;
		
		private decimal _MenuItemIngredientQty;
		
		private EntityRef<Ingredient> _Ingredient;
		
		private EntityRef<MenuItem> _MenuItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMenuItemIngredientIDChanging(short value);
    partial void OnMenuItemIngredientIDChanged();
    partial void OnMenuItemIDChanging(short value);
    partial void OnMenuItemIDChanged();
    partial void OnIngredientIDChanging(short value);
    partial void OnIngredientIDChanged();
    partial void OnMenuItemIngredientQtyChanging(decimal value);
    partial void OnMenuItemIngredientQtyChanged();
    #endregion
		
		public MenuItemIngredient()
		{
			this._Ingredient = default(EntityRef<Ingredient>);
			this._MenuItem = default(EntityRef<MenuItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuItemIngredientID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short MenuItemIngredientID
		{
			get
			{
				return this._MenuItemIngredientID;
			}
			set
			{
				if ((this._MenuItemIngredientID != value))
				{
					this.OnMenuItemIngredientIDChanging(value);
					this.SendPropertyChanging();
					this._MenuItemIngredientID = value;
					this.SendPropertyChanged("MenuItemIngredientID");
					this.OnMenuItemIngredientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuItemID", DbType="SmallInt NOT NULL")]
		public short MenuItemID
		{
			get
			{
				return this._MenuItemID;
			}
			set
			{
				if ((this._MenuItemID != value))
				{
					if (this._MenuItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMenuItemIDChanging(value);
					this.SendPropertyChanging();
					this._MenuItemID = value;
					this.SendPropertyChanged("MenuItemID");
					this.OnMenuItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IngredientID", DbType="SmallInt NOT NULL")]
		public short IngredientID
		{
			get
			{
				return this._IngredientID;
			}
			set
			{
				if ((this._IngredientID != value))
				{
					if (this._Ingredient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIngredientIDChanging(value);
					this.SendPropertyChanging();
					this._IngredientID = value;
					this.SendPropertyChanged("IngredientID");
					this.OnIngredientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuItemIngredientQty", DbType="Decimal(18,0) NOT NULL")]
		public decimal MenuItemIngredientQty
		{
			get
			{
				return this._MenuItemIngredientQty;
			}
			set
			{
				if ((this._MenuItemIngredientQty != value))
				{
					this.OnMenuItemIngredientQtyChanging(value);
					this.SendPropertyChanging();
					this._MenuItemIngredientQty = value;
					this.SendPropertyChanged("MenuItemIngredientQty");
					this.OnMenuItemIngredientQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ingredient_MenuItemIngredient", Storage="_Ingredient", ThisKey="IngredientID", OtherKey="IngredientID", IsForeignKey=true)]
		public Ingredient Ingredient
		{
			get
			{
				return this._Ingredient.Entity;
			}
			set
			{
				Ingredient previousValue = this._Ingredient.Entity;
				if (((previousValue != value) 
							|| (this._Ingredient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ingredient.Entity = null;
						previousValue.MenuItemIngredients.Remove(this);
					}
					this._Ingredient.Entity = value;
					if ((value != null))
					{
						value.MenuItemIngredients.Add(this);
						this._IngredientID = value.IngredientID;
					}
					else
					{
						this._IngredientID = default(short);
					}
					this.SendPropertyChanged("Ingredient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MenuItem_MenuItemIngredient", Storage="_MenuItem", ThisKey="MenuItemID", OtherKey="MenuItemID", IsForeignKey=true)]
		public MenuItem MenuItem
		{
			get
			{
				return this._MenuItem.Entity;
			}
			set
			{
				MenuItem previousValue = this._MenuItem.Entity;
				if (((previousValue != value) 
							|| (this._MenuItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MenuItem.Entity = null;
						previousValue.MenuItemIngredients.Remove(this);
					}
					this._MenuItem.Entity = value;
					if ((value != null))
					{
						value.MenuItemIngredients.Add(this);
						this._MenuItemID = value.MenuItemID;
					}
					else
					{
						this._MenuItemID = default(short);
					}
					this.SendPropertyChanged("MenuItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReservationDetailBilling")]
	public partial class ReservationDetailBilling : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ReservationBillingID;
		
		private short _ReservationDetailID;
		
		private short _BillingCategoryID;
		
		private string _BillingDescription;
		
		private decimal _BillingAmount;
		
		private byte _BillingItemQty;
		
		private System.DateTime _BillingItemDate;
		
		private string _Comments;
		
		private EntitySet<LineItem> _LineItems;
		
		private EntityRef<ReservationDetail> _ReservationDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReservationBillingIDChanging(short value);
    partial void OnReservationBillingIDChanged();
    partial void OnReservationDetailIDChanging(short value);
    partial void OnReservationDetailIDChanged();
    partial void OnBillingCategoryIDChanging(short value);
    partial void OnBillingCategoryIDChanged();
    partial void OnBillingDescriptionChanging(string value);
    partial void OnBillingDescriptionChanged();
    partial void OnBillingAmountChanging(decimal value);
    partial void OnBillingAmountChanged();
    partial void OnBillingItemQtyChanging(byte value);
    partial void OnBillingItemQtyChanged();
    partial void OnBillingItemDateChanging(System.DateTime value);
    partial void OnBillingItemDateChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    #endregion
		
		public ReservationDetailBilling()
		{
			this._LineItems = new EntitySet<LineItem>(new Action<LineItem>(this.attach_LineItems), new Action<LineItem>(this.detach_LineItems));
			this._ReservationDetail = default(EntityRef<ReservationDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationBillingID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ReservationBillingID
		{
			get
			{
				return this._ReservationBillingID;
			}
			set
			{
				if ((this._ReservationBillingID != value))
				{
					this.OnReservationBillingIDChanging(value);
					this.SendPropertyChanging();
					this._ReservationBillingID = value;
					this.SendPropertyChanged("ReservationBillingID");
					this.OnReservationBillingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationDetailID", DbType="SmallInt NOT NULL")]
		public short ReservationDetailID
		{
			get
			{
				return this._ReservationDetailID;
			}
			set
			{
				if ((this._ReservationDetailID != value))
				{
					if (this._ReservationDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReservationDetailIDChanging(value);
					this.SendPropertyChanging();
					this._ReservationDetailID = value;
					this.SendPropertyChanged("ReservationDetailID");
					this.OnReservationDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingCategoryID", DbType="SmallInt NOT NULL")]
		public short BillingCategoryID
		{
			get
			{
				return this._BillingCategoryID;
			}
			set
			{
				if ((this._BillingCategoryID != value))
				{
					this.OnBillingCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._BillingCategoryID = value;
					this.SendPropertyChanged("BillingCategoryID");
					this.OnBillingCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingDescription", DbType="Char(30) NOT NULL", CanBeNull=false)]
		public string BillingDescription
		{
			get
			{
				return this._BillingDescription;
			}
			set
			{
				if ((this._BillingDescription != value))
				{
					this.OnBillingDescriptionChanging(value);
					this.SendPropertyChanging();
					this._BillingDescription = value;
					this.SendPropertyChanged("BillingDescription");
					this.OnBillingDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingAmount", DbType="SmallMoney NOT NULL")]
		public decimal BillingAmount
		{
			get
			{
				return this._BillingAmount;
			}
			set
			{
				if ((this._BillingAmount != value))
				{
					this.OnBillingAmountChanging(value);
					this.SendPropertyChanging();
					this._BillingAmount = value;
					this.SendPropertyChanged("BillingAmount");
					this.OnBillingAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingItemQty", DbType="TinyInt NOT NULL")]
		public byte BillingItemQty
		{
			get
			{
				return this._BillingItemQty;
			}
			set
			{
				if ((this._BillingItemQty != value))
				{
					this.OnBillingItemQtyChanging(value);
					this.SendPropertyChanging();
					this._BillingItemQty = value;
					this.SendPropertyChanged("BillingItemQty");
					this.OnBillingItemQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingItemDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime BillingItemDate
		{
			get
			{
				return this._BillingItemDate;
			}
			set
			{
				if ((this._BillingItemDate != value))
				{
					this.OnBillingItemDateChanging(value);
					this.SendPropertyChanging();
					this._BillingItemDate = value;
					this.SendPropertyChanged("BillingItemDate");
					this.OnBillingItemDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="NVarChar(MAX)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReservationDetailBilling_LineItem", Storage="_LineItems", ThisKey="ReservationBillingID", OtherKey="ReservationBillingID")]
		public EntitySet<LineItem> LineItems
		{
			get
			{
				return this._LineItems;
			}
			set
			{
				this._LineItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReservationDetail_ReservationDetailBilling", Storage="_ReservationDetail", ThisKey="ReservationDetailID", OtherKey="ReservationDetailID", IsForeignKey=true)]
		public ReservationDetail ReservationDetail
		{
			get
			{
				return this._ReservationDetail.Entity;
			}
			set
			{
				ReservationDetail previousValue = this._ReservationDetail.Entity;
				if (((previousValue != value) 
							|| (this._ReservationDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReservationDetail.Entity = null;
						previousValue.ReservationDetailBillings.Remove(this);
					}
					this._ReservationDetail.Entity = value;
					if ((value != null))
					{
						value.ReservationDetailBillings.Add(this);
						this._ReservationDetailID = value.ReservationDetailID;
					}
					else
					{
						this._ReservationDetailID = default(short);
					}
					this.SendPropertyChanged("ReservationDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LineItems(LineItem entity)
		{
			this.SendPropertyChanging();
			entity.ReservationDetailBilling = this;
		}
		
		private void detach_LineItems(LineItem entity)
		{
			this.SendPropertyChanging();
			entity.ReservationDetailBilling = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReservationDetail")]
	public partial class ReservationDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ReservationDetailID;
		
		private short _RoomID;
		
		private short _ReservationID;
		
		private decimal _QuotedRate;
		
		private System.DateTime _CheckinDate;
		
		private byte _Nights;
		
		private char _Status;
		
		private string _Comments;
		
		private System.Nullable<short> _DiscountID;
		
		private byte _NumberOfAdults;
		
		private byte _NumberOfChildren;
		
		private EntitySet<ReservationDetailBilling> _ReservationDetailBillings;
		
		private EntityRef<Room> _Room;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReservationDetailIDChanging(short value);
    partial void OnReservationDetailIDChanged();
    partial void OnRoomIDChanging(short value);
    partial void OnRoomIDChanged();
    partial void OnReservationIDChanging(short value);
    partial void OnReservationIDChanged();
    partial void OnQuotedRateChanging(decimal value);
    partial void OnQuotedRateChanged();
    partial void OnCheckinDateChanging(System.DateTime value);
    partial void OnCheckinDateChanged();
    partial void OnNightsChanging(byte value);
    partial void OnNightsChanged();
    partial void OnStatusChanging(char value);
    partial void OnStatusChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnDiscountIDChanging(System.Nullable<short> value);
    partial void OnDiscountIDChanged();
    partial void OnNumberOfAdultsChanging(byte value);
    partial void OnNumberOfAdultsChanged();
    partial void OnNumberOfChildrenChanging(byte value);
    partial void OnNumberOfChildrenChanged();
    #endregion
		
		public ReservationDetail()
		{
			this._ReservationDetailBillings = new EntitySet<ReservationDetailBilling>(new Action<ReservationDetailBilling>(this.attach_ReservationDetailBillings), new Action<ReservationDetailBilling>(this.detach_ReservationDetailBillings));
			this._Room = default(EntityRef<Room>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationDetailID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ReservationDetailID
		{
			get
			{
				return this._ReservationDetailID;
			}
			set
			{
				if ((this._ReservationDetailID != value))
				{
					this.OnReservationDetailIDChanging(value);
					this.SendPropertyChanging();
					this._ReservationDetailID = value;
					this.SendPropertyChanged("ReservationDetailID");
					this.OnReservationDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", DbType="SmallInt NOT NULL")]
		public short RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					if (this._Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationID", DbType="SmallInt NOT NULL")]
		public short ReservationID
		{
			get
			{
				return this._ReservationID;
			}
			set
			{
				if ((this._ReservationID != value))
				{
					this.OnReservationIDChanging(value);
					this.SendPropertyChanging();
					this._ReservationID = value;
					this.SendPropertyChanged("ReservationID");
					this.OnReservationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuotedRate", DbType="SmallMoney NOT NULL")]
		public decimal QuotedRate
		{
			get
			{
				return this._QuotedRate;
			}
			set
			{
				if ((this._QuotedRate != value))
				{
					this.OnQuotedRateChanging(value);
					this.SendPropertyChanging();
					this._QuotedRate = value;
					this.SendPropertyChanged("QuotedRate");
					this.OnQuotedRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckinDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime CheckinDate
		{
			get
			{
				return this._CheckinDate;
			}
			set
			{
				if ((this._CheckinDate != value))
				{
					this.OnCheckinDateChanging(value);
					this.SendPropertyChanging();
					this._CheckinDate = value;
					this.SendPropertyChanged("CheckinDate");
					this.OnCheckinDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nights", DbType="TinyInt NOT NULL")]
		public byte Nights
		{
			get
			{
				return this._Nights;
			}
			set
			{
				if ((this._Nights != value))
				{
					this.OnNightsChanging(value);
					this.SendPropertyChanging();
					this._Nights = value;
					this.SendPropertyChanged("Nights");
					this.OnNightsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Char(1) NOT NULL")]
		public char Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="VarChar(MAX)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountID", DbType="SmallInt")]
		public System.Nullable<short> DiscountID
		{
			get
			{
				return this._DiscountID;
			}
			set
			{
				if ((this._DiscountID != value))
				{
					this.OnDiscountIDChanging(value);
					this.SendPropertyChanging();
					this._DiscountID = value;
					this.SendPropertyChanged("DiscountID");
					this.OnDiscountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfAdults", DbType="TinyInt NOT NULL")]
		public byte NumberOfAdults
		{
			get
			{
				return this._NumberOfAdults;
			}
			set
			{
				if ((this._NumberOfAdults != value))
				{
					this.OnNumberOfAdultsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfAdults = value;
					this.SendPropertyChanged("NumberOfAdults");
					this.OnNumberOfAdultsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfChildren", DbType="TinyInt NOT NULL")]
		public byte NumberOfChildren
		{
			get
			{
				return this._NumberOfChildren;
			}
			set
			{
				if ((this._NumberOfChildren != value))
				{
					this.OnNumberOfChildrenChanging(value);
					this.SendPropertyChanging();
					this._NumberOfChildren = value;
					this.SendPropertyChanged("NumberOfChildren");
					this.OnNumberOfChildrenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReservationDetail_ReservationDetailBilling", Storage="_ReservationDetailBillings", ThisKey="ReservationDetailID", OtherKey="ReservationDetailID")]
		public EntitySet<ReservationDetailBilling> ReservationDetailBillings
		{
			get
			{
				return this._ReservationDetailBillings;
			}
			set
			{
				this._ReservationDetailBillings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_ReservationDetail", Storage="_Room", ThisKey="RoomID", OtherKey="RoomID", IsForeignKey=true)]
		public Room Room
		{
			get
			{
				return this._Room.Entity;
			}
			set
			{
				Room previousValue = this._Room.Entity;
				if (((previousValue != value) 
							|| (this._Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Room.Entity = null;
						previousValue.ReservationDetails.Remove(this);
					}
					this._Room.Entity = value;
					if ((value != null))
					{
						value.ReservationDetails.Add(this);
						this._RoomID = value.RoomID;
					}
					else
					{
						this._RoomID = default(short);
					}
					this.SendPropertyChanged("Room");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReservationDetailBillings(ReservationDetailBilling entity)
		{
			this.SendPropertyChanging();
			entity.ReservationDetail = this;
		}
		
		private void detach_ReservationDetailBillings(ReservationDetailBilling entity)
		{
			this.SendPropertyChanging();
			entity.ReservationDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Room")]
	public partial class Room : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _RoomID;
		
		private short _HotelRoomTypeID;
		
		private string _RoomNumbers;
		
		private string _RoomDescription;
		
		private bool _RoomSmoking;
		
		private string _RoomBedConfiguration;
		
		private bool _RoomHandicap;
		
		private char _RoomStatus;
		
		private EntitySet<ReservationDetail> _ReservationDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomIDChanging(short value);
    partial void OnRoomIDChanged();
    partial void OnHotelRoomTypeIDChanging(short value);
    partial void OnHotelRoomTypeIDChanged();
    partial void OnRoomNumbersChanging(string value);
    partial void OnRoomNumbersChanged();
    partial void OnRoomDescriptionChanging(string value);
    partial void OnRoomDescriptionChanged();
    partial void OnRoomSmokingChanging(bool value);
    partial void OnRoomSmokingChanged();
    partial void OnRoomBedConfigurationChanging(string value);
    partial void OnRoomBedConfigurationChanged();
    partial void OnRoomHandicapChanging(bool value);
    partial void OnRoomHandicapChanged();
    partial void OnRoomStatusChanging(char value);
    partial void OnRoomStatusChanged();
    #endregion
		
		public Room()
		{
			this._ReservationDetails = new EntitySet<ReservationDetail>(new Action<ReservationDetail>(this.attach_ReservationDetails), new Action<ReservationDetail>(this.detach_ReservationDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelRoomTypeID", DbType="SmallInt NOT NULL")]
		public short HotelRoomTypeID
		{
			get
			{
				return this._HotelRoomTypeID;
			}
			set
			{
				if ((this._HotelRoomTypeID != value))
				{
					this.OnHotelRoomTypeIDChanging(value);
					this.SendPropertyChanging();
					this._HotelRoomTypeID = value;
					this.SendPropertyChanged("HotelRoomTypeID");
					this.OnHotelRoomTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomNumbers", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string RoomNumbers
		{
			get
			{
				return this._RoomNumbers;
			}
			set
			{
				if ((this._RoomNumbers != value))
				{
					this.OnRoomNumbersChanging(value);
					this.SendPropertyChanging();
					this._RoomNumbers = value;
					this.SendPropertyChanged("RoomNumbers");
					this.OnRoomNumbersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomDescription", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string RoomDescription
		{
			get
			{
				return this._RoomDescription;
			}
			set
			{
				if ((this._RoomDescription != value))
				{
					this.OnRoomDescriptionChanging(value);
					this.SendPropertyChanging();
					this._RoomDescription = value;
					this.SendPropertyChanged("RoomDescription");
					this.OnRoomDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomSmoking", DbType="Bit NOT NULL")]
		public bool RoomSmoking
		{
			get
			{
				return this._RoomSmoking;
			}
			set
			{
				if ((this._RoomSmoking != value))
				{
					this.OnRoomSmokingChanging(value);
					this.SendPropertyChanging();
					this._RoomSmoking = value;
					this.SendPropertyChanged("RoomSmoking");
					this.OnRoomSmokingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomBedConfiguration", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string RoomBedConfiguration
		{
			get
			{
				return this._RoomBedConfiguration;
			}
			set
			{
				if ((this._RoomBedConfiguration != value))
				{
					this.OnRoomBedConfigurationChanging(value);
					this.SendPropertyChanging();
					this._RoomBedConfiguration = value;
					this.SendPropertyChanged("RoomBedConfiguration");
					this.OnRoomBedConfigurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomHandicap", DbType="Bit NOT NULL")]
		public bool RoomHandicap
		{
			get
			{
				return this._RoomHandicap;
			}
			set
			{
				if ((this._RoomHandicap != value))
				{
					this.OnRoomHandicapChanging(value);
					this.SendPropertyChanging();
					this._RoomHandicap = value;
					this.SendPropertyChanged("RoomHandicap");
					this.OnRoomHandicapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomStatus", DbType="Char(1) NOT NULL")]
		public char RoomStatus
		{
			get
			{
				return this._RoomStatus;
			}
			set
			{
				if ((this._RoomStatus != value))
				{
					this.OnRoomStatusChanging(value);
					this.SendPropertyChanging();
					this._RoomStatus = value;
					this.SendPropertyChanged("RoomStatus");
					this.OnRoomStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_ReservationDetail", Storage="_ReservationDetails", ThisKey="RoomID", OtherKey="RoomID")]
		public EntitySet<ReservationDetail> ReservationDetails
		{
			get
			{
				return this._ReservationDetails;
			}
			set
			{
				this._ReservationDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReservationDetails(ReservationDetail entity)
		{
			this.SendPropertyChanging();
			entity.Room = this;
		}
		
		private void detach_ReservationDetails(ReservationDetail entity)
		{
			this.SendPropertyChanging();
			entity.Room = null;
		}
	}
}
#pragma warning restore 1591
